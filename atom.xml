<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WhiteWater</title>
  
  <subtitle>Thirst most</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.whitewater96.top/"/>
  <updated>2022-01-13T12:57:46.339Z</updated>
  <id>http://blog.whitewater96.top/</id>
  
  <author>
    <name>ctrl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker入门(三)</title>
    <link href="http://blog.whitewater96.top/2020/02/27/docker%E5%85%A5%E9%97%A8-%E4%B8%89/"/>
    <id>http://blog.whitewater96.top/2020/02/27/docker入门-三/</id>
    <published>2020-02-27T15:28:08.000Z</published>
    <updated>2022-01-13T12:57:46.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用docker部署springboot项目"><a href="#使用docker部署springboot项目" class="headerlink" title="使用docker部署springboot项目"></a>使用docker部署springboot项目</h1><p><img src="/2020/02/27/docker入门-三/docker.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将Docker通过插件的方式集成到SpringBoot中，然后通过Maven命令根据项目中的Dockerfile自动生成Docker镜像，同时将镜像推送到远程docker仓库中，然后在服务器通过pull镜像启动Docker来启动SpringBoot项目，并访问接口。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><blockquote><p>jdk</p><p>maven</p><p>docker</p></blockquote><h3 id="springboot项目"><a href="#springboot项目" class="headerlink" title="springboot项目"></a>springboot项目</h3><h4 id="pom-xml-增加docker依赖"><a href="#pom-xml-增加docker依赖" class="headerlink" title="pom.xml 增加docker依赖"></a>pom.xml 增加docker依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;!-- docker service --&gt;</span><br><span class="line">&lt;docker.registryUrl&gt;http:<span class="comment">//101.xxx.xxx.167:2375 &lt;/docker.registryUrl&gt;</span></span><br><span class="line">        &lt;docker.imageName&gt;101.xxx.xxx.167/library/$&#123;project.artifactId&#125;:1.0&lt;/docker.imageName&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 连接远程仓库 --&gt;</span><br><span class="line">&lt;serverId&gt;docker-harbor&lt;/serverId&gt;</span><br><span class="line">&lt;!-- 远程仓库地址 --&gt;</span><br><span class="line">&lt;registryUrl&gt;$&#123;docker.registryUrl&#125;&lt;/registryUrl&gt;</span><br><span class="line">&lt;dockerHost&gt;$&#123;docker.registryUrl&#125;&lt;/dockerHost&gt;</span><br><span class="line">&lt;!-- 这里是最终生成的docker镜像名称 注意imageName一定要是符合正则[a-z0-<span class="number">9</span>-_.]的，否则构建不会成功 --&gt;</span><br><span class="line">&lt;imageName&gt;$&#123;docker.imageName&#125;&lt;/imageName&gt;</span><br><span class="line">&lt;dockerDirectory&gt;$&#123;project.basedir&#125;/bin/docker&lt;/dockerDirectory&gt;</span><br><span class="line">&lt;!-- resources的内容会复制  dockerDirectory (也就是构建上下文)中 --&gt;</span><br><span class="line">               &lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">&lt;include&gt;web.war&lt;/include&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;!-- 覆盖镜像 --&gt;</span><br><span class="line">&lt;forceTags&gt;true&lt;/forceTags&gt;</span><br><span class="line">&lt;!--  推送镜像 --&gt;</span><br><span class="line">&lt;pushImage&gt;true&lt;/pushImage&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;!-- 项目<span class="keyword">package</span>时会执行docker build 命令 --&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">&lt;id&gt;build-image&lt;/id&gt;</span><br><span class="line">&lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">&lt;goals&gt;</span><br><span class="line">&lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">&lt;/goals&gt;</span><br><span class="line">&lt;/execution&gt;</span><br><span class="line">&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h4 id="新增-Dockerfile-文件"><a href="#新增-Dockerfile-文件" class="headerlink" title="新增 Dockerfile 文件"></a>新增 Dockerfile 文件</h4><p>在项目的根目录下新增bin/docker/Dockerfile文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line">MAINTAINER <span class="number">123456</span><span class="meta">@qq</span>.com</span><br><span class="line">ENV TZ <span class="string">"Asia/Shanghai"</span></span><br><span class="line">ENV LANG C.UTF-<span class="number">8</span></span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line">#添加打包好的war包</span><br><span class="line">ADD web.war .</span><br><span class="line">RUN jar -xvf web.war</span><br><span class="line"></span><br><span class="line">WORKDIR /app/WEB-INF</span><br><span class="line">ENV JAVA_OPTS <span class="string">"-Xms256m -Xmx1024m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m"</span></span><br><span class="line">ENV JAVA_OPTS <span class="string">"$JAVA_OPTS -Dspring.profiles.active=prod"</span></span><br><span class="line"></span><br><span class="line"># 添加项目配置文件    </span><br><span class="line">ADD application-prod.yml ./classes/config</span><br><span class="line"></span><br><span class="line">ENTRYPOINT java -cp /app $JAVA_OPTS org.springframework.boot.loader.WarLauncher</span><br><span class="line"></span><br><span class="line"># 项目映射端口</span><br><span class="line">EXPOSE <span class="number">8086</span></span><br></pre></td></tr></table></figure><h2 id="docker远程仓库"><a href="#docker远程仓库" class="headerlink" title="docker远程仓库"></a>docker远程仓库</h2><h4 id="docker私服仓库harbor"><a href="#docker私服仓库harbor" class="headerlink" title="docker私服仓库harbor"></a>docker私服仓库harbor</h4><p>Harbor是构建企业级私有docker镜像的仓库的开源解决方案，它是Docker Registry的更高级封装，从而获得了更加广泛的应用，这些新的企业级特性包括：管理用户界面，基于角色的访问控制 ，AD/LDAP集成以及审计日志等，足以满足基本企业需求。</p><p>hardor的安装可自行百度 本文已经安装好hardor </p><p><img src="/2020/02/27/docker入门-三/1583661546032.png" alt="1583661546032"></p><h4 id="maven-设置-setting"><a href="#maven-设置-setting" class="headerlink" title="maven 设置 setting"></a>maven 设置 setting</h4><p>在maven的setting文件中找到server节点加入Harbor的服务信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">      &lt;!--maven的pom中可以根据这个id找到这个server节点的配置--&gt;  </span><br><span class="line">      &lt;id&gt;docker-harbor&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;password&lt;/password&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">       &lt;email&gt;somebody@mail.com&lt;/email&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure><h2 id="打包推送镜像"><a href="#打包推送镜像" class="headerlink" title="打包推送镜像"></a>打包推送镜像</h2><h3 id="执行package命令"><a href="#执行package命令" class="headerlink" title="执行package命令"></a>执行package命令</h3><p><img src="/2020/02/27/docker入门-三/1583661139999.png" alt="1583661139999"></p><h3 id="bulid镜像"><a href="#bulid镜像" class="headerlink" title="bulid镜像"></a>bulid镜像</h3><p><img src="/2020/02/27/docker入门-三/1583661422497.png" alt="1583661422497"></p><h3 id="push镜像"><a href="#push镜像" class="headerlink" title="push镜像"></a>push镜像</h3><p><img src="/2020/02/27/docker入门-三/1583661451294.png" alt="1583661451294"></p><h3 id="在docker服务器端查看镜像"><a href="#在docker服务器端查看镜像" class="headerlink" title="在docker服务器端查看镜像"></a>在docker服务器端查看镜像</h3><p><img src="/2020/02/27/docker入门-三/1583663474460.png" alt="1583663474460"></p><h3 id="查看镜像仓库"><a href="#查看镜像仓库" class="headerlink" title="查看镜像仓库"></a>查看镜像仓库</h3><p><img src="/2020/02/27/docker入门-三/1583662850195.png" alt="1583662850195"></p><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p><img src="/2020/02/27/docker入门-三/1583665034066.png" alt="1583665034066"></p><h3 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h3><p><img src="/2020/02/27/docker入门-三/1583664984673.png" alt="1583664984673"></p><h2 id="整合jenkins实现自动部署"><a href="#整合jenkins实现自动部署" class="headerlink" title="整合jenkins实现自动部署"></a>整合jenkins实现自动部署</h2><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><p>随着DevOps理念和敏捷理念的发展，我们希望通过自动化技术，加快项目的迭代。尤其是当使用微服务方案后，面临在大量的项目构建和部署工作，借助于jenkins的持续集成，可以快速把应用打包成docker镜像，实现自动部署。</p><p><img src="/2020/02/27/docker入门-三/6944619-06b84e9a5c3beb98.png" alt></p><p>如图演示了以下的场景：</p><ul><li>开发者向自己的gitlab网站提交了代码</li><li>jenkins通过定时任务检测到了代码有变成，执行自动化构建过程</li><li>jenkins在自动化构建脚本中调用docker命令将构建好的镜像push 到harbor私有镜像仓库</li><li>同时，jenkins也可以直接执行shell启动构建好的容器</li><li>构建失败或者成功，可以及时将结果推送给相关人员，比如测试人员，安排测试</li><li>服务端可以手动通过docker命令，从镜像仓库中心拉取镜像，进行手动部署</li></ul><h3 id="jenkins构建项目"><a href="#jenkins构建项目" class="headerlink" title="jenkins构建项目"></a>jenkins构建项目</h3><p>代码托管平台使用的是gitlab 所以要在jenkins上安装gitlab插件</p><p><img src="/2020/02/27/docker入门-三/1583661879303.png" alt></p><p>新建一个maven项目，添加gitlab代码地址</p><p><img src="/2020/02/27/docker入门-三/1583673049110.png" alt="1583673049110"></p><p>项目构建成功 执行shell 启动镜像</p><p><img src="/2020/02/27/docker入门-三/1583673656207.png" alt="1583673656207"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><strong>基于Docker+Jenkins+Gitlab搭建持续集成环境的教程到此结束了，说实话第一次接触这些确实不好弄，自己研究了两个礼拜才把整套流程完整的走了一遍，记录的也很粗糙，有些细节写的不是很清楚，中间踩了很多很多坑。很高兴自己能坚持下来，也学到了不少东西，继续加油吧！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用docker部署springboot项目&quot;&gt;&lt;a href=&quot;#使用docker部署springboot项目&quot; class=&quot;headerlink&quot; title=&quot;使用docker部署springboot项目&quot;&gt;&lt;/a&gt;使用docker部署springboot项目&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/27/docker入门-三/docker.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;将Docker通过插件的方式集成到SpringBoot中，然后通过Maven命令根据项目中的Dockerfile自动生成Docker镜像，同时将镜像推送到远程docker仓库中，然后在服务器通过pull镜像启动Docker来启动SpringBoot项目，并访问接口。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.whitewater96.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.whitewater96.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker入门(二) docker命令使用</title>
    <link href="http://blog.whitewater96.top/2020/02/24/docker%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://blog.whitewater96.top/2020/02/24/docker入门-二/</id>
    <published>2020-02-24T14:21:48.000Z</published>
    <updated>2022-01-13T12:57:46.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker命令使用"><a href="#docker命令使用" class="headerlink" title="docker命令使用"></a>docker命令使用</h1><p><img src="/2020/02/24/docker入门-二/docker.jpg" alt></p><h2 id="docker基本操作"><a href="#docker基本操作" class="headerlink" title="docker基本操作"></a>docker基本操作</h2><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h3 id="docker-run-start-stop-restart-kill-rm-pause-unpause"><a href="#docker-run-start-stop-restart-kill-rm-pause-unpause" class="headerlink" title="docker [run|start|stop|restart|kill|rm|pause|unpause]"></a>docker [run|start|stop|restart|kill|rm|pause|unpause]</h3><p>·  <a href="http://www.runoob.com/docker/docker-run-command.html" target="_blank" rel="noopener">run</a> /<a href="http://www.runoob.com/docker/docker-create-command.html" target="_blank" rel="noopener">create</a>[镜像名]：  创建一个新的容器并运行一个命令</p><p>·  <a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank" rel="noopener">start/stop/restart</a>[容器名]：启动/停止/重启一个容器</p><p>·  <a href="http://www.runoob.com/docker/docker-kill-command.html" target="_blank" rel="noopener">kill</a> [容器名]： 直接杀掉容器，不给进程响应时间</p><p>·  <a href="http://www.runoob.com/docker/docker-rm-command.html" target="_blank" rel="noopener">rm</a>[容器名]：删除已经停止的容器</p><p>·  <a href="http://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank" rel="noopener">pause/unpause</a>[容器名]：暂停/恢复容器中的进程</p><a id="more"></a><h3 id="docker-ps-inspect-exec-logs-export-import"><a href="#docker-ps-inspect-exec-logs-export-import" class="headerlink" title="docker [ps|inspect|exec|logs|export|import]"></a>docker [ps|inspect|exec|logs|export|import]</h3><p>·  <a href="http://www.runoob.com/docker/docker-ps-command.html" target="_blank" rel="noopener">ps</a>：查看容器列表（默认查看正在运行的容器，-a查看所有容器）</p><p>·  <a href="http://www.runoob.com/docker/docker-inspect-command.html" target="_blank" rel="noopener">inspect</a>[容器名]：查看容器配置元数据</p><p>·  <a href="https://www.runoob.com/docker/docker-exec-command.html" target="_blank" rel="noopener">exec -it </a>[容器名] /bin/bash：进入容器环境中交互操作</p><p>·  <a href="https://www.runoob.com/docker/docker-logs-command.html" target="_blank" rel="noopener">logs</a> [容器名]:查看容器日志 </p><p>·  <a href="https://www.runoob.com/docker/docker-cp-command.html" target="_blank" rel="noopener">cp</a> path1 [容器名]:path  容器与主机之间的数据拷贝</p><p>·  <a href="https://www.runoob.com/docker/docker-export-command.html" target="_blank" rel="noopener">export</a> -o test.tar  [容器名] : 文件系统作为一个tar归档文件</p><p>·  <a href="https://www.runoob.com/docker/docker-import-command.html" target="_blank" rel="noopener">import</a> test.tar [镜像名版本号]:导入归档文件，成为一个镜像</p><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h3 id="docker-images-rmi-tag-build-history-save-load"><a href="#docker-images-rmi-tag-build-history-save-load" class="headerlink" title="docker images|rmi|tag|build|history|save|load]"></a>docker images|rmi|tag|build|history|save|load]</h3><p>·  <a href="http://www.runoob.com/docker/docker-images-command.html" target="_blank" rel="noopener">images</a>：列出本地镜像列表</p><p>·  <a href="http://www.runoob.com/docker/docker-rmi-command.html" target="_blank" rel="noopener">rmi</a> [镜像名：版本]：删除镜像</p><p>·  <a href="https://www.runoob.com/docker/docker-tag-command.html" target="_blank" rel="noopener">tag</a> [镜像名：版本] [仓库]/[镜像名：版本]：标记本地镜像，将其归入某一仓库</p><p>·  <a href="http://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener">build</a> -t [镜像名：版本] [path]：Dockerfile 创建镜像</p><p>·  <a href="http://www.runoob.com/docker/docker-history-command.html" target="_blank" rel="noopener">history</a> [镜像名：版本]: 查看指定镜像的创建历史</p><p>·  <a href="https://www.runoob.com/docker/docker-save-command.html" target="_blank" rel="noopener">save</a> -o xxx.tar [镜像名：版本]: 将镜像保存成 tar归档文件</p><p>·  <a href="https://www.runoob.com/docker/docker-load-command.html" target="_blank" rel="noopener">load</a> –input  xx.tar  : 从归档文件加载镜像</p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="交互式创建容器并进入"><a href="#交互式创建容器并进入" class="headerlink" title="交互式创建容器并进入"></a>交互式创建容器并进入</h3><p><img src="/2020/02/24/docker入门-二/1.png" alt></p><p><code>docker run -it --name centos centos /bin/bash</code>（前台进程） </p><p><code>exit</code>退出也关闭容器; <code>Ctrl+P+Q</code>退出不关闭容器 </p><p><img src="/2020/02/24/docker入门-二/2.png" alt></p><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><p><img src="/2020/02/24/docker入门-二/3.png" alt></p><p><code>docker run -d --name nginx nginx</code></p><h3 id="进入已运行的容器"><a href="#进入已运行的容器" class="headerlink" title="进入已运行的容器"></a>进入已运行的容器</h3><p><code>docker exec -it nginx /bin/bash</code></p><h3 id="绑定容器端口到主机启动容器"><a href="#绑定容器端口到主机启动容器" class="headerlink" title="绑定容器端口到主机启动容器"></a>绑定容器端口到主机启动容器</h3><p><code>docker run -d -p 8080:80 --name nginx nginx:latest</code></p><h2 id="docker仓库使用"><a href="#docker仓库使用" class="headerlink" title="docker仓库使用"></a>docker仓库使用</h2><p>仓库（Repository）是集中存放镜像的地方。以下介绍一下 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。当然不止 docker hub，只是远程的服务商不一样，操作都是一样的。</p><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。</p><p>大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p><p>登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 登录</span><br><span class="line">docker login</span><br><span class="line"># 退出</span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>你可以通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。</p><p>以 centos为关键词进行搜索：</p><p><img src="/2020/02/24/docker入门-二/1582811371362.png" alt="1582811371362"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认下载last版本 最新版本</span><br><span class="line">docker pull centos</span><br><span class="line"># 下载指定版本 centos7版本</span><br><span class="line">docker pull centos:centos7</span><br></pre></td></tr></table></figure><h2 id="docker-数据管理"><a href="#docker-数据管理" class="headerlink" title="docker 数据管理"></a>docker 数据管理</h2><p>docker容器运行，产生一些数据/文件/等等持久化的东西，不应该放在容器内部。应当以挂载的形式存在主机文件系统中。</p><h3 id="docker的文件系统"><a href="#docker的文件系统" class="headerlink" title="docker的文件系统"></a>docker的文件系统</h3><p><img src="/2020/02/24/docker入门-二/4.png" alt></p><ol><li><p>镜像与容器读写层，通过联合文件系统，组成系统文件视角</p></li><li><p>容器服务运行中，一定会生成数据</p></li><li><p>容器只是运行态的服务器，是瞬时的，不承载数据的持久功能</p></li></ol><h3 id="volume文件挂载的探究"><a href="#volume文件挂载的探究" class="headerlink" title="volume文件挂载的探究"></a>volume文件挂载的探究</h3><p>1、volume参数创建容器数据卷</p><p><img src="/2020/02/24/docker入门-二/5.png" alt></p><p>2、我们通过docker inspect data查看容器元数据，可看到挂载信息</p><p><img src="/2020/02/24/docker入门-二/6.png" alt></p><p><img src="/2020/02/24/docker入门-二/7.png" alt></p><p>3、在容器端添加一个文件</p><p><img src="/2020/02/24/docker入门-二/8.png" alt></p><p>回主机目录查看，果然存在此文件：</p><p><img src="/2020/02/24/docker入门-二/9.png" alt></p><p>4、在主机方添加一个文件</p><p><img src="/2020/02/24/docker入门-二/10.png" alt></p><p>回容器里查看，果然也同步增加了此文件</p><p><img src="/2020/02/24/docker入门-二/11.png" alt></p><p>5、指定主机目录方式挂载文件</p><p>格式：-v path1：path2</p><p>如下命令，容器方会自动增加一个data目录</p><p><img src="/2020/02/24/docker入门-二/12.png" alt></p><p>宿主机方，同样自动增加一个/opt/data目录</p><p><img src="/2020/02/24/docker入门-二/13.png" alt></p><h2 id="Dockerfile使用"><a href="#Dockerfile使用" class="headerlink" title="Dockerfile使用"></a>Dockerfile使用</h2><h3 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条的指令<strong>，</strong>每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h3 id="dockerfile基本要素"><a href="#dockerfile基本要素" class="headerlink" title="dockerfile基本要素"></a>dockerfile基本要素</h3><p><img src="/2020/02/24/docker入门-二/14.png" alt></p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>FROM镜像</td><td>指定新镜像所基于的镜像，必须为第一条指令</td></tr><tr><td>MAINTAINER 名字</td><td>新镜像的维护人信息</td></tr><tr><td>RUN 命令</td><td>在所基于的镜像上执行命令，并提交到新镜像中</td></tr><tr><td>EXPOSE端口号</td><td>指定新镜像加载到Docker时开启的端口号</td></tr><tr><td>ENV 环境变量 变量值</td><td>设置一个环境变量的值，会被后面的RUN使用</td></tr><tr><td>ADD 源文件/目录 目标文件/目录</td><td>将源文件复制到目标文件，源文件要与Docker位于同一目录下，或者为一个URL</td></tr><tr><td>COPY 源文件/目录 目标文件/目录</td><td>将本地主机上的源文件/目录复制到目标地点，源文件/目录要与Dockerfile在同一目录下</td></tr><tr><td>VOLUME[“目录”]</td><td>在容器中创建一个挂载点</td></tr><tr><td>USER 用户名 /UID</td><td>指定运行容器时的用户</td></tr><tr><td>WORKDIR 路径</td><td>为后续的RUN、CMD、ENTRYPOINT指定工作目录</td></tr><tr><td>ONBUILD命令</td><td>指定所生成的镜像作为一个基础镜像时所要运行的命令</td></tr><tr><td>CMD[“要运行的程序”，”参数1”，”参数2”]</td><td>指定启动容器时运行的命令或脚本，只能有一条CMD命令，多条时只有最后一条被执行</td></tr></tbody></table><h3 id="使用-Dockerfile-创建httpd镜像"><a href="#使用-Dockerfile-创建httpd镜像" class="headerlink" title="使用 Dockerfile 创建httpd镜像"></a>使用 Dockerfile 创建httpd镜像</h3><h4 id="1-创建镜像工作目录并进入"><a href="#1-创建镜像工作目录并进入" class="headerlink" title="1.创建镜像工作目录并进入"></a>1.创建镜像工作目录并进入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir apache</span><br><span class="line"></span><br><span class="line">cd apache/</span><br></pre></td></tr></table></figure><h4 id="2-创建并编写dockerfile文件"><a href="#2-创建并编写dockerfile文件" class="headerlink" title="2.创建并编写dockerfile文件"></a>2.创建并编写dockerfile文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line">*******文件内容******************* </span><br><span class="line"></span><br><span class="line">#基于centos镜像</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">#维护人的信息</span><br><span class="line">MAINTAINER The CentOS Project &lt;<span class="number">123456789</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line"></span><br><span class="line">#安装httpd软件包</span><br><span class="line">RUN yum -y update</span><br><span class="line">RUN yum -y install httpd</span><br><span class="line"></span><br><span class="line">#开启80端口</span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"></span><br><span class="line">#复制网站首页文件至镜像中web站点下</span><br><span class="line">ADD index.html /<span class="keyword">var</span>/www/html/index.html</span><br><span class="line"></span><br><span class="line">#复制该脚本至镜像中，并修改其权限</span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod <span class="number">775</span> /run.sh</span><br><span class="line"></span><br><span class="line">#当启动容器时执行的脚本文件</span><br><span class="line">CMD [<span class="string">"/run.sh"</span>]</span><br></pre></td></tr></table></figure><p><img src="/2020/02/24/docker入门-二/1582813889613.png" alt="1582813889613"></p><h4 id="3-创建脚本文件"><a href="#3-创建脚本文件" class="headerlink" title="3.创建脚本文件"></a>3.创建脚本文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim run.sh</span><br><span class="line"></span><br><span class="line">*****文件内容*******</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#清空httpd缓存文件</span><br><span class="line">rm -rf /run/httpd<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启动httpd服务</span></span><br><span class="line"><span class="comment">exec /usr/sbin/apachectl -D FOREGROUND</span></span><br></pre></td></tr></table></figure><h4 id="4-创建网站首页文件"><a href="#4-创建网站首页文件" class="headerlink" title="4.创建网站首页文件"></a>4.创建网站首页文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Thiss is Nginx webapp."</span> &gt; index.html</span><br></pre></td></tr></table></figure><h4 id="5-查看当前目录文件列表"><a href="#5-查看当前目录文件列表" class="headerlink" title="5.查看当前目录文件列表"></a>5.查看当前目录文件列表</h4><p><img src="/2020/02/24/docker入门-二/1582814035925.png" alt="1582814035925"></p><h4 id="6-通过Dockerfile文件生成镜像"><a href="#6-通过Dockerfile文件生成镜像" class="headerlink" title="6.通过Dockerfile文件生成镜像"></a>6.通过Dockerfile文件生成镜像</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t httpd:centos</span><br></pre></td></tr></table></figure><p><img src="/2020/02/24/docker入门-二/1582814207301.png" alt="1582814207301"></p><h4 id="7-镜像文件加载到容器中运行"><a href="#7-镜像文件加载到容器中运行" class="headerlink" title="7.镜像文件加载到容器中运行"></a>7.镜像文件加载到容器中运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">80</span>:<span class="number">80</span> --name=httpd httpd:centos</span><br></pre></td></tr></table></figure><h4 id="8-查看运行中的容器"><a href="#8-查看运行中的容器" class="headerlink" title="8.查看运行中的容器"></a>8.查看运行中的容器</h4><p><img src="/2020/02/24/docker入门-二/1582814266733.png" alt="1582814266733"></p><h4 id="9-运行浏览器测试httpd服务"><a href="#9-运行浏览器测试httpd服务" class="headerlink" title="9.运行浏览器测试httpd服务"></a>9.运行浏览器测试httpd服务</h4><p><img src="/2020/02/24/docker入门-二/1582814323741.png" alt="1582814323741"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.runoob.com/docker/docker-image-usage.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-image-usage.html</a></p><p><a href="https://blog.51cto.com/10316297/2160524" target="_blank" rel="noopener">https://blog.51cto.com/10316297/2160524</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker命令使用&quot;&gt;&lt;a href=&quot;#docker命令使用&quot; class=&quot;headerlink&quot; title=&quot;docker命令使用&quot;&gt;&lt;/a&gt;docker命令使用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/24/docker入门-二/docker.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;docker基本操作&quot;&gt;&lt;a href=&quot;#docker基本操作&quot; class=&quot;headerlink&quot; title=&quot;docker基本操作&quot;&gt;&lt;/a&gt;docker基本操作&lt;/h2&gt;&lt;h3 id=&quot;容器操作&quot;&gt;&lt;a href=&quot;#容器操作&quot; class=&quot;headerlink&quot; title=&quot;容器操作&quot;&gt;&lt;/a&gt;容器操作&lt;/h3&gt;&lt;h3 id=&quot;docker-run-start-stop-restart-kill-rm-pause-unpause&quot;&gt;&lt;a href=&quot;#docker-run-start-stop-restart-kill-rm-pause-unpause&quot; class=&quot;headerlink&quot; title=&quot;docker [run|start|stop|restart|kill|rm|pause|unpause]&quot;&gt;&lt;/a&gt;docker [run|start|stop|restart|kill|rm|pause|unpause]&lt;/h3&gt;&lt;p&gt;·  &lt;a href=&quot;http://www.runoob.com/docker/docker-run-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;run&lt;/a&gt; /&lt;a href=&quot;http://www.runoob.com/docker/docker-create-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create&lt;/a&gt;[镜像名]：  创建一个新的容器并运行一个命令&lt;/p&gt;
&lt;p&gt;·  &lt;a href=&quot;http://www.runoob.com/docker/docker-start-stop-restart-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;start/stop/restart&lt;/a&gt;[容器名]：启动/停止/重启一个容器&lt;/p&gt;
&lt;p&gt;·  &lt;a href=&quot;http://www.runoob.com/docker/docker-kill-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kill&lt;/a&gt; [容器名]： 直接杀掉容器，不给进程响应时间&lt;/p&gt;
&lt;p&gt;·  &lt;a href=&quot;http://www.runoob.com/docker/docker-rm-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rm&lt;/a&gt;[容器名]：删除已经停止的容器&lt;/p&gt;
&lt;p&gt;·  &lt;a href=&quot;http://www.runoob.com/docker/docker-pause-unpause-command.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pause/unpause&lt;/a&gt;[容器名]：暂停/恢复容器中的进程&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.whitewater96.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.whitewater96.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker入门(一) Dokcer介绍和安装</title>
    <link href="http://blog.whitewater96.top/2020/02/20/docker%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://blog.whitewater96.top/2020/02/20/docker入门-一/</id>
    <published>2020-02-20T15:02:42.000Z</published>
    <updated>2022-01-13T12:57:46.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dokcer介绍和安装"><a href="#Dokcer介绍和安装" class="headerlink" title="Dokcer介绍和安装"></a>Dokcer介绍和安装</h1><p><img src="/2020/02/20/docker入门-一/docker.jpg" alt></p><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">Go 语言</a> 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br><a id="more"></a><br>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><h3 id="为什么用Docker"><a href="#为什么用Docker" class="headerlink" title="为什么用Docker"></a>为什么用Docker</h3><h4 id="更快速的交付和部署"><a href="#更快速的交付和部署" class="headerlink" title="更快速的交付和部署"></a>更快速的交付和部署</h4><p>Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p><h4 id="更高效的虚拟化"><a href="#更高效的虚拟化" class="headerlink" title="更高效的虚拟化"></a>更高效的虚拟化</h4><p>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。</p><h4 id="更轻松的迁移和扩展"><a href="#更轻松的迁移和扩展" class="headerlink" title="更轻松的迁移和扩展"></a>更轻松的迁移和扩展</h4><p>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p><h4 id="更简单的管理"><a href="#更简单的管理" class="headerlink" title="更简单的管理"></a>更简单的管理</h4><p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。</p><h3 id="docker对比传统虚拟机"><a href="#docker对比传统虚拟机" class="headerlink" title="docker对比传统虚拟机"></a>docker对比传统虚拟机</h3><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>先看一张docker架构图，接下来详细介绍一下这张图</p><p><img src="/2020/02/20/docker入门-一/图片1.png" alt></p><p>图中的一些名词解释：</p><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>Images</td><td>Docker   镜像，用于创建 Docker   容器的模板。</td></tr><tr><td>Container</td><td>Docker   容器，独立运行的一个或一组应用。</td></tr><tr><td>Client</td><td>Docker   客户端，使用 Docker   Api与 Docker   的守护进程通信。</td></tr><tr><td>Host</td><td>Docker   主机，一个物理或者虚拟的机器   用于执行 Docker   守护进程和容器。</td></tr><tr><td>Registry</td><td>Docker   仓库，用来保存镜像</td></tr><tr><td></td><td>Docker   服务器组件，docker最核心的后台进程</td></tr><tr><td>Machine</td><td>一个简化Docker安装的命令行工具，   比如VirtualBox、   Digital Ocean、Microsoft Azure。</td></tr></tbody></table><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><p>Docker 镜像就是一个只读的模板。</p><p>例如：一个镜像可以包含一个完整的 centos 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。</p><p>镜像可以用来创建 Docker 容器。</p><p>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p><h3 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h3><p>Docker 利用容器来运行应用。</p><p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><h3 id="docker客户端"><a href="#docker客户端" class="headerlink" title="docker客户端"></a>docker客户端</h3><p>它其实就是 Docker 提供命令行界面 (CLI) 工具，是许多 Docker 用户与 Docker 进行交互的主要方式。</p><p>客户端可以构建，运行和停止应用程序，还可以远程与Docker_Host进行交互。</p><p>最常用的 Docker 客户端就是 docker 命令，我们可以通过 docker 命令很方便地在 host 上构建和运行 docker 容器。</p><h3 id="docker仓库"><a href="#docker仓库" class="headerlink" title="docker仓库"></a>docker仓库</h3><p>仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p>最大的公开仓库是 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，存放了数量庞大的镜像供用户下载。 国内的公开仓库包括 <a href="http://www.dockerpool.com/" target="_blank" rel="noopener">Docker Pool</a> 等，可以提供大陆用户更稳定快速的访问。</p><p>当然，用户也可以在本地网络内创建一个私有仓库。</p><p>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</p><h3 id="容器、镜像的运行关系"><a href="#容器、镜像的运行关系" class="headerlink" title="容器、镜像的运行关系"></a>容器、镜像的运行关系</h3><p><img src="/2020/02/20/docker入门-一/图片2.png" alt></p><p>镜像和容器之间的关系和java继承类比：</p><p>Class2   extents     Class1    ———– Object o = new Class2 ———– 此时，o对象的结构中，有Class1的成员结构</p><p>image2    extents     image1   ———– Container c = new image2 ——– 此时，c容器中，有image1的文件</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><code>Docker</code> 分为 <code>CE</code> 和 <code>EE</code> 两大版本。。 <code>CE</code> 即社区版（免费，支持周期 7 个月）， <code>EE</code> 即企业版，强调安全，付费使用，支持周期 24 个月。</p><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>这里我们以 <code>CentOS7</code> 作为本文的演示。</p><p><code>Docker</code> 软件包已经包括在默认的 <code>CentOS-Extras</code> 软件源里。因此想要安装 <code>docker</code>，只需要运行下面的 <code>yum</code> 命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><h3 id="docker安装验证"><a href="#docker安装验证" class="headerlink" title="docker安装验证"></a>docker安装验证</h3><p>安装完成后，运行下面的命令，验证是否安装成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">or</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p><img src="/2020/02/20/docker入门-一/1582553368142.png" alt="1582553368142"></p><p>返回docker的版本相关信息，证明 <strong>docker</strong> 安装成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dokcer介绍和安装&quot;&gt;&lt;a href=&quot;#Dokcer介绍和安装&quot; class=&quot;headerlink&quot; title=&quot;Dokcer介绍和安装&quot;&gt;&lt;/a&gt;Dokcer介绍和安装&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/20/docker入门-一/docker.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h2&gt;&lt;h3 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h3&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 &lt;a href=&quot;https://www.runoob.com/go/go-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go 语言&lt;/a&gt; 并遵从 Apache2.0 协议开源。&lt;/p&gt;
&lt;p&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.whitewater96.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.whitewater96.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jenkins系列(二 jenkins部署项目)</title>
    <link href="http://blog.whitewater96.top/2020/02/18/jenkins%E7%B3%BB%E5%88%97-%E4%BA%8C/"/>
    <id>http://blog.whitewater96.top/2020/02/18/jenkins系列-二/</id>
    <published>2020-02-18T13:49:13.000Z</published>
    <updated>2022-01-13T12:57:46.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/18/jenkins系列-二/jenkins.png" alt></p><h1 id="jenkins部署项目"><a href="#jenkins部署项目" class="headerlink" title="jenkins部署项目"></a>jenkins部署项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇中已经搭建好jenkins环境，详情可见 <a href="https://blog.yuanww.cn/2020/02/16/jenkins系列-一/" target="_blank" rel="noopener">jenkins的安装和启动</a>  </p><p>本篇以上篇为基础，进行一个简单的项目部署，应用一下jenkins与java项目在实际开发中的集成</p><p>项目为本人github上的一个测试项目，一个简单的文件上传的demo</p><h2 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h2><a id="more"></a><p><img src="/2020/02/18/jenkins系列-二/1582029069583.png" alt="1582029069583"></p><p>jenkins安装完成后进入首页，我们需要配置一下全局属性，点击系统管理，选择全局工具配置</p><p><img src="/2020/02/18/jenkins系列-二/1582029440125.png" alt="1582029440125"></p><p>主要是三个属性，jdk、git、maven，选择已经安装好的目录，或者选择自动安装</p><p><img src="/2020/02/18/jenkins系列-二/1582029557414.png" alt="1582029557414"></p><p><img src="/2020/02/18/jenkins系列-二/1582029569357.png" alt="1582029569357"></p><h2 id="安装Maven插件"><a href="#安装Maven插件" class="headerlink" title="安装Maven插件"></a>安装Maven插件</h2><p>找到 “系统管理”-“安装插件”,点击“可选插件”，</p><p><img src="/2020/02/18/jenkins系列-二/1582029865930.png" alt="1582029865930"></p><p>找到如下maven插件的版本 插件名称 <strong>Maven Integration</strong> （构建maven项目）</p><p><img src="/2020/02/18/jenkins系列-二/1582030374802.png" alt="1582030374802"></p><p>勾选，直接安装</p><h2 id="jenkins新建项目"><a href="#jenkins新建项目" class="headerlink" title="jenkins新建项目"></a>jenkins新建项目</h2><p>配置好全局属性和maven插件之后，回到首页，点击新建任务，选择构建一个maven项目</p><p><img src="/2020/02/18/jenkins系列-二/1582030656988.png" alt="1582030656988"></p><p>点击确定，进入项目配置，在源码管理选择git ，填入项目源码的git地址</p><p><img src="/2020/02/18/jenkins系列-二/1582030898538.png" alt="1582030898538"></p><p>build 输入打包前的 mvn 命令   <code>clean install -Dmaven.test.skip=true</code> </p><p>意思是：排除测试的包内容，使用后缀为 test 的配置文件。</p><p><img src="/2020/02/18/jenkins系列-二/1582031969137.png" alt="1582031969137"></p><p>Post Steps，选择Run only if build succeeds </p><p>然后点击Add post-build step，选择执行sell，添加shell命令，用java -jar 直接启动打好的jar包</p><p><img src="/2020/02/18/jenkins系列-二/1582032599887.png" alt="1582032599887"></p><p>shell命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#服务名称</span><br><span class="line">SERVER_NAME=demo</span><br><span class="line"></span><br><span class="line">echo <span class="string">"查询进程id--&gt;$SERVER_NAME"</span></span><br><span class="line"></span><br><span class="line">PID=`ps -ef | grep <span class="string">"$SERVER_NAME"</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line">echo <span class="string">"得到进程ID：$PID"</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">"结束进程"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id in $PID</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">kill -<span class="number">9</span> $id  </span><br><span class="line"></span><br><span class="line">echo <span class="string">"killed $id"</span>  </span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo <span class="string">"结束进程完成"</span></span><br><span class="line"></span><br><span class="line"># jenkens启动任务后会自动kill掉后台进程 设置不要杀死进程</span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line"></span><br><span class="line"># 后台启动jar包 并输入日志到指定文件</span><br><span class="line">nohup java -jar /<span class="keyword">var</span>/jenkins_home/workspace/demo/target/demo-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar &gt;/opt/demo.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>配置完成，点击保存</p><h1 id="jenkins项目启动"><a href="#jenkins项目启动" class="headerlink" title="jenkins项目启动"></a>jenkins项目启动</h1><p>点击任务，进入任务详情</p><p><img src="/2020/02/18/jenkins系列-二/1582033177160.png" alt="1582033177160"></p><p>点击立即构建 构建项目</p><p><img src="/2020/02/18/jenkins系列-二/1582033238747.png" alt="1582033238747"></p><p>点击立即构建后会在下方出现一个进度条，点击进度条，会跳到构建详情页面，可以看到控制台输出日志</p><p><img src="/2020/02/18/jenkins系列-二/1582033298941.png" alt="1582033298941"></p><p>部署项目 的时候先自动安装maven（我这里选的自动安装，若配置maven目录无此步骤），然后会从你的git地址上拉取源代码，maven打包</p><p><img src="/2020/02/18/jenkins系列-二/1582034420718.png" alt="1582034420718"></p><p>maven打包时会根据pom.xml文件下载相关jar包 </p><p>第一次部署项目的时候会比较慢一点 等待即可（可以在maven里配置一下镜像源 会比较快一点）</p><p><img src="/2020/02/18/jenkins系列-二/1582034475894.png" alt="1582034475894"></p><p>项目构建结束 打印出shell命令日志 说明项目构建成功 </p><p><img src="/2020/02/18/jenkins系列-二/1582034613878.png" alt="1582034613878"></p><p>在浏览器输入项目ip和端口号 可以正常访问 项目部署成功！</p><p><img src="/2020/02/18/jenkins系列-二/1582034861492.png" alt="1582034861492"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/18/jenkins系列-二/jenkins.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;jenkins部署项目&quot;&gt;&lt;a href=&quot;#jenkins部署项目&quot; class=&quot;headerlink&quot; title=&quot;jenkins部署项目&quot;&gt;&lt;/a&gt;jenkins部署项目&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上一篇中已经搭建好jenkins环境，详情可见 &lt;a href=&quot;https://blog.yuanww.cn/2020/02/16/jenkins系列-一/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jenkins的安装和启动&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;本篇以上篇为基础，进行一个简单的项目部署，应用一下jenkins与java项目在实际开发中的集成&lt;/p&gt;
&lt;p&gt;项目为本人github上的一个测试项目，一个简单的文件上传的demo&lt;/p&gt;
&lt;h2 id=&quot;jenkins配置&quot;&gt;&lt;a href=&quot;#jenkins配置&quot; class=&quot;headerlink&quot; title=&quot;jenkins配置&quot;&gt;&lt;/a&gt;jenkins配置&lt;/h2&gt;
    
    </summary>
    
      <category term="jenkins" scheme="http://blog.whitewater96.top/categories/jenkins/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="jenkins" scheme="http://blog.whitewater96.top/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins系列（一 jenkins的安装和启动）</title>
    <link href="http://blog.whitewater96.top/2020/02/16/jenkins%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
    <id>http://blog.whitewater96.top/2020/02/16/jenkins系列-一/</id>
    <published>2020-02-16T05:46:18.000Z</published>
    <updated>2022-01-13T12:57:46.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/16/jenkins系列-一/jenkins.png" alt></p><h1 id="jenkins的安装和启动"><a href="#jenkins的安装和启动" class="headerlink" title="jenkins的安装和启动"></a>jenkins的安装和启动</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h3><p>jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。<br><a id="more"></a></p><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h3><p> CI(Continuous integration，中文意思是持续集成)是一种软件开发时间。持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。借用网络图片对CI加以理解。</p><p><img src="/2020/02/16/jenkins系列-一/6464255-1b6e3bfdbece1492.jpg" alt></p><p>CD(Continuous Delivery， 中文意思持续交付)是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境(类生产环境)中。比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。下图反应的是CI/CD 的大概工作模式。</p><p><img src="/2020/02/16/jenkins系列-一/6464255-ba088ec7257062c0.jpg" alt></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>jenkins需要运行在jdk上，所以安装jenkins需要提前安装jdk。</p><p>jdk安装可参考我之前的博客：<a href="https://blog.yuanww.cn/2019/12/27/linux下安装和配置jdk/" target="_blank" rel="noopener">linux下安装和配置jdk</a></p><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><p>登录jenkins的官网，点击Download，作者使用服务器为阿里云服务器 linux版本为centos</p><p><img src="/2020/02/16/jenkins系列-一/1581818445165.png" alt="1581818445165"></p><p>复制链接地址</p><p><img src="/2020/02/16/jenkins系列-一/1581818933160.png" alt="1581818933160"></p><p>使用wget命令下载jenkins</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//pkg.jenkins.io/redhat-stable/jenkins-2.204.2-1.1.noarch.rpm</span></span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/jenkins系列-一/1581819180438.png" alt="1581819180438"></p><p>下载完成 使用rpm包安装命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ih jenkins-<span class="number">2.204</span><span class="number">.2</span>-<span class="number">1.1</span>.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/jenkins系列-一/1581819283952.png" alt="1581819283952"></p><h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><p>安装之后需要对jenkins配置文件进行一些修改</p><h4 id="配置java路径"><a href="#配置java路径" class="headerlink" title="配置java路径"></a>配置java路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/jenkins</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/jenkins系列-一/1581819557545.png" alt="1581819557545"></p><h4 id="配置jenkis的端口"><a href="#配置jenkis的端口" class="headerlink" title="配置jenkis的端口"></a>配置jenkis的端口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/jenkins系列-一/1581819648836.png" alt="1581819648836"></p><blockquote><p><strong>此端口不冲突可以不修改</strong></p></blockquote><h4 id="生效配置"><a href="#生效配置" class="headerlink" title="生效配置"></a>生效配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="启动jenkins"><a href="#启动jenkins" class="headerlink" title="启动jenkins"></a>启动jenkins</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>jekin启动成功之后 在本地浏览器中输入“<a href="http://IP:8080”登录jenkins" target="_blank" rel="noopener">http://IP:8080”登录jenkins</a></p><p>第一次访问 需要等待jenkins的配置 耐心等待一会就好</p><p><img src="/2020/02/16/jenkins系列-一/1581820210398.png" alt="1581820210398"></p><p>第一次登录Jenkins 会要求解锁 直接复制密码 粘贴登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zearagh0l7ldulx80p6Z /]# cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line"><span class="number">1</span>a40b19799ff461490d453b0b646056e</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/jenkins系列-一/1581820350472.png" alt="1581820350472"></p><p>默认选择安装推荐的插件</p><p><img src="/2020/02/16/jenkins系列-一/1581820507618.png" alt="1581820507618"></p><p>创建管理员用户</p><p><img src="/2020/02/16/jenkins系列-一/1581820607638.png" alt="1581820607638"></p><p>默认为服务器ip+配置端口号 直接下一步下一步</p><p><img src="/2020/02/16/jenkins系列-一/1581820674393.png" alt="1581820674393"></p><p>设置完成</p><p><img src="/2020/02/16/jenkins系列-一/1581820700101.png" alt="1581820700101"></p><p><strong>jenkins的安装到此结束 下一章介绍如何部署项目！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/16/jenkins系列-一/jenkins.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;jenkins的安装和启动&quot;&gt;&lt;a href=&quot;#jenkins的安装和启动&quot; class=&quot;headerlink&quot; title=&quot;jenkins的安装和启动&quot;&gt;&lt;/a&gt;jenkins的安装和启动&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;jenkins&quot;&gt;&lt;a href=&quot;#jenkins&quot; class=&quot;headerlink&quot; title=&quot;jenkins&quot;&gt;&lt;/a&gt;jenkins&lt;/h3&gt;&lt;p&gt;jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="http://blog.whitewater96.top/categories/jenkins/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="jenkins" scheme="http://blog.whitewater96.top/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>redis系列(二 springboot整合redis)</title>
    <link href="http://blog.whitewater96.top/2020/02/12/redis%E7%B3%BB%E5%88%97-%E4%BA%8C/"/>
    <id>http://blog.whitewater96.top/2020/02/12/redis系列-二/</id>
    <published>2020-02-12T12:21:06.000Z</published>
    <updated>2022-01-13T12:57:46.476Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/12/redis系列-二/redis.jpg" alt></p><h1 id="springboot整合redis-以及redis的简单使用"><a href="#springboot整合redis-以及redis的简单使用" class="headerlink" title="springboot整合redis 以及redis的简单使用"></a>springboot整合redis 以及redis的简单使用</h1><p><strong>做一个简单的demo ，redis在springboot中的应用</strong></p><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><h3 id="pom文件-springboot和redis相关依赖"><a href="#pom文件-springboot和redis相关依赖" class="headerlink" title="pom文件 springboot和redis相关依赖"></a>pom文件 springboot和redis相关依赖</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.12.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;demo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- redis依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Redis客户端 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="application-properties中redis相关配置"><a href="#application-properties中redis相关配置" class="headerlink" title="application.properties中redis相关配置"></a>application.properties中redis相关配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=<span class="number">0</span></span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=<span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span></span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br><span class="line"># Redis服务器连接密码</span><br><span class="line">spring.redis.password=myredis</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.activemq.pool.max-connections=<span class="number">5</span></span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-wait=-<span class="number">1</span></span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.jedis.pool.max-idle=<span class="number">8</span></span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.jedis.pool.min-idle=<span class="number">0</span></span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="config配置类"><a href="#config配置类" class="headerlink" title="config配置类"></a>config配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host:disabled&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port:0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.database:0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> database;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password:0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisUtil <span class="title">getRedisUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(host.equals(<span class="string">"disabled"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RedisUtil redisUtil=<span class="keyword">new</span> RedisUtil();</span><br><span class="line">        redisUtil.initPool(host,port,password,database);</span><br><span class="line">        <span class="keyword">return</span> redisUtil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="util工具类"><a href="#util工具类" class="headerlink" title="util工具类"></a>util工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">(String host,<span class="keyword">int</span> port,String password,<span class="keyword">int</span> database)</span></span>&#123;</span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">30</span>);</span><br><span class="line">        poolConfig.setBlockWhenExhausted(<span class="keyword">true</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">        poolConfig.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">        jedisPool=<span class="keyword">new</span> JedisPool(poolConfig,host,port,<span class="number">20</span>*<span class="number">1000</span>,password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = redisUtil.getJedis();</span><br><span class="line">        jedis.set(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">        String aa = jedis.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><strong>控制台输出</strong></p><p><img src="/2020/02/12/redis系列-二/1581601590779.png" alt="1581601590779"></p><p><strong>数据库查询</strong></p><p><img src="/2020/02/12/redis系列-二/1581601642219.png" alt="1581601642219"></p><p><strong>简单的一个demo完成！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/12/redis系列-二/redis.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;springboot整合redis-以及redis的简单使用&quot;&gt;&lt;a href=&quot;#springboot整合redis-以及redis的简单使用&quot; class=&quot;headerlink&quot; title=&quot;springboot整合redis 以及redis的简单使用&quot;&gt;&lt;/a&gt;springboot整合redis 以及redis的简单使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;做一个简单的demo ，redis在springboot中的应用&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码整合&quot;&gt;&lt;a href=&quot;#代码整合&quot; class=&quot;headerlink&quot; title=&quot;代码整合&quot;&gt;&lt;/a&gt;代码整合&lt;/h2&gt;&lt;h3 id=&quot;pom文件-springboot和redis相关依赖&quot;&gt;&lt;a href=&quot;#pom文件-springboot和redis相关依赖&quot; class=&quot;headerlink&quot; title=&quot;pom文件 springboot和redis相关依赖&quot;&gt;&lt;/a&gt;pom文件 springboot和redis相关依赖&lt;/h3&gt;
    
    </summary>
    
      <category term="redis" scheme="http://blog.whitewater96.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://blog.whitewater96.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis系列(一 redis的安装和配置)</title>
    <link href="http://blog.whitewater96.top/2020/02/07/redis%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
    <id>http://blog.whitewater96.top/2020/02/07/redis系列-一/</id>
    <published>2020-02-07T14:30:37.000Z</published>
    <updated>2022-01-13T12:57:46.472Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/07/redis系列-一/redis.jpg" alt></p><h1 id="Redis的安装和配置"><a href="#Redis的安装和配置" class="headerlink" title="Redis的安装和配置"></a>Redis的安装和配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h3><p>REmote DIctionary Server(<strong>Redis</strong>) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><a id="more"></a><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h3 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h3><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weget http:<span class="comment">//download.redis.io/releases/redis-5.0.4.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -vzxf redis-<span class="number">5.0</span><span class="number">.4</span>.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译、安装"><a href="#编译、安装" class="headerlink" title="编译、安装"></a>编译、安装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd redis-<span class="number">5.0</span><span class="number">.4</span></span><br><span class="line">    </span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/redis系列-一/1581431911939.png" alt="1581431911939"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装成功后，下面对Redis 进行部署</p><h3 id="移动配置文件"><a href="#移动配置文件" class="headerlink" title="移动配置文件"></a>移动配置文件</h3><p> <strong>为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中</strong></p><p>1）、创建bin和etc文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/redis</span><br><span class="line">mkdir /usr/local/redis/etc</span><br><span class="line">mkdir /usr/local/redis/bin</span><br></pre></td></tr></table></figure><p>2）、移动配置文件</p><p>在安装目录下移动redis,conf到/usr/local/redis/etc 下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv redis.conf /usr/local/redis/etc/</span><br></pre></td></tr></table></figure><p>在安装目录下进入src目录 ，移动mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server到/usr/local/redis/bin/</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/local/redis/bin/</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/redis系列-一/1581432521312.png" alt="1581432521312"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>进入 <code>/usr/local/redis/etc</code> 目录下执行  <code>vim redis.conf</code></p><p>需要注意修改的几个参数：</p><ol><li>bind 127.0.0.1 （ 绑定的主机地址 如需要可以改为指定ip 我通常注释掉）</li><li>daemonize （属性改为yes 表明需要在后台运行）</li><li>requirepass foobared （去掉注释，foobared改为自己的密码）</li><li>protected-mode  （默认是yes，改为no 外部网络可以直接访问）</li></ol><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入 /usr/local/redis/bin 目录 指定启动服务配置文件启动服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/redis/bin</span><br><span class="line">./redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/redis系列-一/1581433613681.png" alt="1581433613681"></p><p>查看进程 启动成功</p><blockquote><p>加入开机启动   编辑配置文件</p><p><code>vim  /etc/rc.local</code> </p><p>在最后一行添加 <code>redis-server  /usr/local/redis/etc/redis.conf</code></p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>连接redis  连接命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h <span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span> -p <span class="number">6379</span> </span><br><span class="line">    </span><br><span class="line">auth myreds  #输入密码 myredis是在conf配置的密码</span><br><span class="line"></span><br><span class="line">ping #检测是否连接成功</span><br><span class="line"></span><br><span class="line">keys * #查看所有数据</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/redis系列-一/1581433802658.png" alt="1581433802658"></p><p><strong>redis安装成功!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/07/redis系列-一/redis.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Redis的安装和配置&quot;&gt;&lt;a href=&quot;#Redis的安装和配置&quot; class=&quot;headerlink&quot; title=&quot;Redis的安装和配置&quot;&gt;&lt;/a&gt;Redis的安装和配置&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;redis简介&quot;&gt;&lt;a href=&quot;#redis简介&quot; class=&quot;headerlink&quot; title=&quot;redis简介&quot;&gt;&lt;/a&gt;redis简介&lt;/h3&gt;&lt;p&gt;REmote DIctionary Server(&lt;strong&gt;Redis&lt;/strong&gt;) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;/p&gt;
&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;
&lt;p&gt;Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="http://blog.whitewater96.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://blog.whitewater96.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合FastsDFS</title>
    <link href="http://blog.whitewater96.top/2020/02/01/SpringBoot%E6%95%B4%E5%90%88FastsDFS/"/>
    <id>http://blog.whitewater96.top/2020/02/01/SpringBoot整合FastsDFS/</id>
    <published>2020-02-01T13:21:49.000Z</published>
    <updated>2022-01-13T12:57:46.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合FastDFS客户端"><a href="#SpringBoot整合FastDFS客户端" class="headerlink" title="SpringBoot整合FastDFS客户端"></a>SpringBoot整合FastDFS客户端</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两篇介绍整体上介绍了通过 Nginx 和 FastDFS 的整合来实现文件服务器。但是，在实际开发中对图片或文件的操作都是通过应用程序来完成的，因此，本篇将介绍 Spring Boot 整合 FastDFS 客户端来实现对图片/文件服务器的访问。</p><p><strong>如果有不了解 FastDFS 的读者可以先浏览<a href="https://blog.yuanww.cn/2020/01/26/FastDFS环境搭建/" target="_blank" rel="noopener">《FastDFS 环境搭建》</a> 和 <a href="https://blog.yuanww.cn/2020/01/30/Nginx整合FastDFS/" target="_blank" rel="noopener">《Nginx 整合 FastDFS 实现文件服务器》</a> 来普及内容，或是另行查阅网上相关资料。</strong></p><a id="more"></a> <h2 id="整合编码"><a href="#整合编码" class="headerlink" title="整合编码"></a>整合编码</h2><p>项目整体的代码结构图如下：</p><p><img src="/2020/02/01/SpringBoot整合FastsDFS/1580646074989.png" alt="1580646074989"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>上边的 fastdfs-client 是并非 FastDFS Client 原作者编写的整合包，具体详情可以访问 <a href="https://github.com/tobato/FastDFS_Client。" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client。</a></p><p>在Maven当中配置依赖以后，SpringBoot项目将会自动导入FastDFS依赖。</p><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8060</span></span><br><span class="line"></span><br><span class="line"># ===================================================================</span><br><span class="line"># 分布式文件系统FDFS配置</span><br><span class="line"># ===================================================================</span><br><span class="line">fdfs:</span><br><span class="line">  so-timeout: <span class="number">1501</span></span><br><span class="line">  connect-timeout: <span class="number">6000</span></span><br><span class="line">  thumb-image:             #缩略图生成参数</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">150</span></span><br><span class="line">  web-server-url: <span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span>/</span><br><span class="line">  tracker-list:</span><br><span class="line">    - 192.168.130.130:22122     #如果有多个tracker节点可以添加多行</span><br></pre></td></tr></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><h4 id="FastDFS工具类"><a href="#FastDFS工具类" class="headerlink" title="FastDFS工具类"></a>FastDFS工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(FastDFSClient<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient fastFileStorageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FdfsWebServer fdfsWebServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件访问地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StorePath storePath = fastFileStorageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 将一段字符串生成一个文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String content, String fileExtension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buff = content.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        ByteArrayInputStream stream = <span class="keyword">new</span> ByteArrayInputStream(buff);</span><br><span class="line">        StorePath storePath = fastFileStorageClient.uploadFile(stream,buff.length, fileExtension,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileUrl 文件url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[]  download(String fileUrl) &#123;</span><br><span class="line">        String group = fileUrl.substring(<span class="number">0</span>, fileUrl.indexOf(<span class="string">"/"</span>));</span><br><span class="line">        String path = fileUrl.substring(fileUrl.indexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> fastFileStorageClient.downloadFile(group, path, <span class="keyword">new</span> DownloadByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileUrl 文件访问地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String fileUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">            fastFileStorageClient.deleteFile(storePath.getGroup(), storePath.getPath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FdfsUnsupportStorePathException e) &#123;</span><br><span class="line">            LOGGER.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装图片完整URL地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> storePath 文件路基</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getResAccessUrl</span><span class="params">(StorePath storePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fdfsWebServer.getWebServerUrl() + storePath.getFullPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fdfs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDfsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastDFSClient fdfsClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = fdfsClient.uploadFile(file);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="number">200</span>);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">        result.put(<span class="string">"url"</span>, url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileUrl  url 开头从组名开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">download</span><span class="params">(String fileUrl, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = fdfsClient.download(fileUrl);</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(<span class="string">"test.jpg"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line">        IOUtils.write(data, outputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/bootstrap/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">form &#123;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-sm-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> FastDFS 文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/fdfs/upload&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-sm-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>本篇只测试文件上传和访问的效果，演示图如下：</p><p><img src="/2020/02/01/SpringBoot整合FastsDFS/测试.gif" alt></p><p>整合成功^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合FastDFS客户端&quot;&gt;&lt;a href=&quot;#SpringBoot整合FastDFS客户端&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合FastDFS客户端&quot;&gt;&lt;/a&gt;SpringBoot整合FastDFS客户端&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前两篇介绍整体上介绍了通过 Nginx 和 FastDFS 的整合来实现文件服务器。但是，在实际开发中对图片或文件的操作都是通过应用程序来完成的，因此，本篇将介绍 Spring Boot 整合 FastDFS 客户端来实现对图片/文件服务器的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果有不了解 FastDFS 的读者可以先浏览&lt;a href=&quot;https://blog.yuanww.cn/2020/01/26/FastDFS环境搭建/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《FastDFS 环境搭建》&lt;/a&gt; 和 &lt;a href=&quot;https://blog.yuanww.cn/2020/01/30/Nginx整合FastDFS/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Nginx 整合 FastDFS 实现文件服务器》&lt;/a&gt; 来普及内容，或是另行查阅网上相关资料。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/categories/FastDFS/"/>
    
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>Nginx整合FastDFS</title>
    <link href="http://blog.whitewater96.top/2020/01/30/Nginx%E6%95%B4%E5%90%88FastDFS/"/>
    <id>http://blog.whitewater96.top/2020/01/30/Nginx整合FastDFS/</id>
    <published>2020-01-30T06:22:52.000Z</published>
    <updated>2022-01-13T12:57:46.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx整合FastDFS"><a href="#Nginx整合FastDFS" class="headerlink" title="Nginx整合FastDFS"></a>Nginx整合FastDFS</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇衔接<a href="https://blog.yuanww.cn/2020/01/26/FastDFS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">《FastDFS 环境搭建》</a>内容进行讲解，上篇文章我们实现了图片上传的功能，但是无法通过 http 进行访问，本篇将解决该问题。</p><p><strong>建议读者先浏览<a href="https://blog.yuanww.cn/2020/01/26/FastDFS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA" target="_blank" rel="noopener">《FastDFS 环境搭建》</a>再继续浏览本篇文章。</strong></p><a id="more"></a> <h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载-fastdfs-nginx-module"><a href="#下载-fastdfs-nginx-module" class="headerlink" title="下载 fastdfs-nginx-module"></a>下载 fastdfs-nginx-module</h3><p>Nginx 整合 FastDFS 需要依赖 fastdfs-nginx-module 模块，我们需要将其下载下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# git clone https://github.com/happyfish100/fastdfs-nginx-module.git</span><br><span class="line"></span><br><span class="line">[root@localhost fastdfs-nginx-module]# pwd</span><br><span class="line">/opt/fastdfs-nginx-module</span><br></pre></td></tr></table></figure><h3 id="安装-nginx-fastdfs-nginx-module"><a href="#安装-nginx-fastdfs-nginx-module" class="headerlink" title="安装 nginx/fastdfs-nginx-module"></a>安装 nginx/fastdfs-nginx-module</h3><p>笔者已经安装 nginx，具体操作可以访问 <a href="[https://blog.yuanww.cn/2020/01/13/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEnginx/](https://blog.yuanww.cn/2020/01/13/linux下安装和配置nginx/">《linux下安装和配置nginx》</a>)。</p><p>切换到nginx目录下  添加 fastdfs-nginx-module 模块、</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost fastdfs-nginx-module]# cd /usr/local/nginx/</span><br><span class="line">[root@localhost nginx]# pwd</span><br><span class="line">/usr/local/nginx</span><br><span class="line">[root@localhost nginx]#</span><br></pre></td></tr></table></figure><p>执行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/<span class="keyword">var</span>/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/<span class="keyword">var</span>/lock/nginx.lock \</span><br><span class="line">--error-log-path=/<span class="keyword">var</span>/log/nginx/error.log \</span><br><span class="line">--http-log-path=/<span class="keyword">var</span>/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/<span class="keyword">var</span>/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/<span class="keyword">var</span>/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/<span class="keyword">var</span>/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/<span class="keyword">var</span>/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/<span class="keyword">var</span>/temp/nginx/scgi \</span><br><span class="line">--add-<span class="keyword">module</span>=/opt/fastdfs-nginx-<span class="keyword">module</span>/src</span><br></pre></td></tr></table></figure><p><strong>最后一行修改为fastdfs-nginx-module的路径</strong></p><p><img src="/2020/01/30/Nginx整合FastDFS/1580556609509.png" alt="1580556609509"></p><p>执行完毕之后再执行 make 即可。<strong>注意，不需要 make install</strong></p><p><img src="/2020/01/30/Nginx整合FastDFS/1580556737455.png" alt="1580556737455"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="修改-fastdfs-nginx-module-配置文件"><a href="#修改-fastdfs-nginx-module-配置文件" class="headerlink" title="修改 fastdfs-nginx-module 配置文件"></a>修改 fastdfs-nginx-module 配置文件</h3><p>复制 mod_fastdfs 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure><p>修改 vim /etc/fdfs/mod_fastdfs.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">base_path=/data/fastdfs/tmp</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.130.130:22122</span><br><span class="line"></span><br><span class="line">url_have_group_name = true</span><br><span class="line"></span><br><span class="line">store_path0=/data/fastdfs/storage</span><br></pre></td></tr></table></figure><h3 id="修改-nginx-配置文件"><a href="#修改-nginx-配置文件" class="headerlink" title="修改 nginx 配置文件"></a>修改 nginx 配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="/2020/01/30/Nginx整合FastDFS/1580557564847.png" alt="1580557564847"></p><p>保存文件，重启 nginx ：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>通过fdfs命令上传图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/test.jpg</span><br></pre></td></tr></table></figure><p><img src="/2020/01/30/Nginx整合FastDFS/1580560900329.png" alt="1580560900329"></p><p> 打开浏览器访问 <a href="http://192.168.130.130/group1/M00/00/00/wKiCgl41ceSAUhhLAABwt-sqKY0013.jpg" target="_blank" rel="noopener">http://192.168.130.130/group1/M00/00/00/wKiCgl41ceSAUhhLAABwt-sqKY0013.jpg</a></p><p>显示效果：</p><p><img src="/2020/01/30/Nginx整合FastDFS/1580560932580.png" alt="1580560932580"></p><p>整合成功！^_^**</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx整合FastDFS&quot;&gt;&lt;a href=&quot;#Nginx整合FastDFS&quot; class=&quot;headerlink&quot; title=&quot;Nginx整合FastDFS&quot;&gt;&lt;/a&gt;Nginx整合FastDFS&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇衔接&lt;a href=&quot;https://blog.yuanww.cn/2020/01/26/FastDFS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《FastDFS 环境搭建》&lt;/a&gt;内容进行讲解，上篇文章我们实现了图片上传的功能，但是无法通过 http 进行访问，本篇将解决该问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议读者先浏览&lt;a href=&quot;https://blog.yuanww.cn/2020/01/26/FastDFS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《FastDFS 环境搭建》&lt;/a&gt;再继续浏览本篇文章。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/categories/FastDFS/"/>
    
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/tags/FastDFS/"/>
    
      <category term="nginx" scheme="http://blog.whitewater96.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS环境搭建</title>
    <link href="http://blog.whitewater96.top/2020/01/26/FastDFS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.whitewater96.top/2020/01/26/FastDFS环境搭建/</id>
    <published>2020-01-26T11:28:54.000Z</published>
    <updated>2022-01-13T12:57:46.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FastDFS环境搭建"><a href="#FastDFS环境搭建" class="headerlink" title="FastDFS环境搭建"></a>FastDFS环境搭建</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="FastDFS定义"><a href="#FastDFS定义" class="headerlink" title="FastDFS定义"></a>FastDFS定义</h3><p>FastDFS是用 C 语言编写的一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><a id="more"></a> <h3 id="FastDFS架构"><a href="#FastDFS架构" class="headerlink" title="FastDFS架构"></a>FastDFS架构</h3><p><img src="/2020/01/26/FastDFS环境搭建/fastdfs-01.png" alt><br>FastDFS 服务端主要有两个角色：跟踪器（Tracker）和存储节点（Storage）。客户端请求 Tracker 进行文件上传、下载，通过 Tracker 调度最终由 Storage 完成文件上传和下载。</p><p>Tracker 作用是负载均衡和调度，通过 Tracker 在文件上传时可以根据一些策略找到 Storage 提供文件上传服务。</p><p>Storage 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Storage 没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。</p><p>跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><strong>本次测试使用 ip 为 192.168.130.130 的 CentOS 7 系统的虚拟机</strong></p><p><strong>注意：FastDFS是C语言开发，在linux服务器上安装编译需要gcc 依赖环境</strong></p></blockquote><h3 id="安装-libfastcommon"><a href="#安装-libfastcommon" class="headerlink" title="安装 libfastcommon"></a>安装 libfastcommon</h3><p>libfastcommon 是 FastDFS 官方提供的，其包含了 FastDFS 运行所需要的一些基础库。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# git clone https://github.com/happyfish100/libfastcommon.git</span><br><span class="line"></span><br><span class="line">[root@localhost opt]# cd libfastcommon/</span><br><span class="line">    </span><br><span class="line">[root@localhost libfastcommon]# ./make.sh </span><br><span class="line"></span><br><span class="line">[root@localhost libfastcommon]# ./make.sh install</span><br><span class="line"></span><br><span class="line">[root@localhost libfastcommon]#</span><br></pre></td></tr></table></figure><h3 id="安装-FastDFS"><a href="#安装-FastDFS" class="headerlink" title="安装 FastDFS"></a>安装 FastDFS</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# git clone https://github.com/happyfish100/fastdfs.git</span><br><span class="line"></span><br><span class="line">[root@localhost opt]# cd fastdfs/</span><br><span class="line">    </span><br><span class="line">[root@localhost fastdfs]# ./make.sh </span><br><span class="line"></span><br><span class="line">[root@localhost fastdfs]# ./make.sh install</span><br><span class="line"></span><br><span class="line">[root@localhost fastdfs]#</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/FastDFS环境搭建/fastdfs安装.gif" alt></p><p>安装 FastDFS 成功后，将安装目录下的conf下的文件拷贝到/etc/fdfs/下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost fastdfs]# cd conf</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# cp  *  /etc/fdfs/</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先创建 4 个目录：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# mkdir -p /data/fastdfs/tracker</span><br><span class="line">[root@localhost conf]# mkdir -p /data/fastdfs/storage</span><br><span class="line">[root@localhost conf]# mkdir -p /data/fastdfs/client</span><br><span class="line">[root@localhost conf]# mkdir -p /data/fastdfs/tmp</span><br></pre></td></tr></table></figure><p>这些目录用于存放 fastDFS 服务产生的数据文件和日志。</p><h3 id="配置-Tracker"><a href="#配置-Tracker" class="headerlink" title="配置 Tracker"></a>配置 Tracker</h3><p>修改 tracker.conf 文件：vim /etc/fdfs/tracker.conf</p><p><img src="/2020/01/26/FastDFS环境搭建/1580358840631.png" alt="1580358840631"></p><p>启动 Tracker Server 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# /usr/bin/fdfs_trackerd  /etc/fdfs/tracker.conf start</span><br></pre></td></tr></table></figure><p>检测启动情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# ps -ef | grep tracker</span><br><span class="line">root       <span class="number">6069</span>      <span class="number">1</span>  <span class="number">0</span> <span class="number">12</span>:<span class="number">39</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start</span><br><span class="line">root       <span class="number">6077</span>   <span class="number">5125</span>  <span class="number">0</span> <span class="number">12</span>:<span class="number">39</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=auto tracker</span><br></pre></td></tr></table></figure><h3 id="配置-Storage"><a href="#配置-Storage" class="headerlink" title="配置 Storage"></a>配置 Storage</h3><p>修改 storage.conf 文件：<code>vim /etc/fdfs/storage.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">port=23000</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line">store_path0=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.130.130:22122</span><br><span class="line"></span><br><span class="line">http.server_port=80</span><br></pre></td></tr></table></figure><p><strong>注意：tracker_server 中，ip 为本机 ip，端口为 tracker.conf 中设置的值</strong></p><p>启动 Storage Server 服务：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# /usr/bin/fdfs_storaged  /etc/fdfs/storage.conf start</span><br></pre></td></tr></table></figure><p>检测启动情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]#  ps -ef | grep storage</span><br><span class="line">root       <span class="number">6109</span>      <span class="number">1</span> <span class="number">60</span> <span class="number">12</span>:<span class="number">48</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">04</span> /usr/bin/fdfs_storaged /etc/fdfs/storage.conf start</span><br><span class="line">root       <span class="number">6119</span>   <span class="number">5125</span>  <span class="number">0</span> <span class="number">12</span>:<span class="number">48</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=auto storage</span><br></pre></td></tr></table></figure><hr><blockquote><p>tracker、storage加入开机启动<br>编辑文件 <code>vim /etc/rc.d/rc.local</code><br>在最后一行加入<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_trackerd  /etc/fdfs/tracker.conf start</span><br><span class="line">/usr/bin/fdfs_storaged  /etc/fdfs/storage.conf start</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置-client"><a href="#配置-client" class="headerlink" title="配置 client"></a>配置 client</h3><p><strong>此步骤的配置是为了测试</strong></p><p>修改 client.conf 文件：<code>vim /etc/fdfs/client.conf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/data/fastdfs/client</span><br><span class="line"></span><br><span class="line">tracker_server=<span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span>:<span class="number">22122</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>准备一张测试图片 test.jpg 上传到/root目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls test.jpg </span><br><span class="line">test.jpg</span><br><span class="line">[root@localhost ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>通过 fdfs 命令上传该图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/test.jpg</span><br></pre></td></tr></table></figure><p>最终，图片会被上传到 <code>/data/fastdfs/storage/data/</code> 目录中。</p><p>运行结果如下图：</p><p><img src="/2020/01/26/FastDFS环境搭建/1580361401375.png" alt="1580361401375"></p><p>不过目前该图片无法通过浏览器访问，因为我们还没有设置 web 服务器将外部请求与本地文件系统中的目录的映射关联。最简单的实现方式就是整合 nginx 服务器来实现 http 访问请求，该功能将在下篇文章介绍。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.extlight.com/2018/10/18/FastDFS-环境搭建/" target="_blank" rel="noopener">https://www.extlight.com/2018/10/18/FastDFS-环境搭建</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FastDFS环境搭建&quot;&gt;&lt;a href=&quot;#FastDFS环境搭建&quot; class=&quot;headerlink&quot; title=&quot;FastDFS环境搭建&quot;&gt;&lt;/a&gt;FastDFS环境搭建&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;FastDFS定义&quot;&gt;&lt;a href=&quot;#FastDFS定义&quot; class=&quot;headerlink&quot; title=&quot;FastDFS定义&quot;&gt;&lt;/a&gt;FastDFS定义&lt;/h3&gt;&lt;p&gt;FastDFS是用 C 语言编写的一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。&lt;/p&gt;
&lt;p&gt;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/p&gt;
    
    </summary>
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/categories/FastDFS/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="FastDFS" scheme="http://blog.whitewater96.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>dubbo系列(三 springboot整合dubbo)</title>
    <link href="http://blog.whitewater96.top/2020/01/19/dubbo%E7%B3%BB%E5%88%97-%E4%B8%89/"/>
    <id>http://blog.whitewater96.top/2020/01/19/dubbo系列-三/</id>
    <published>2020-01-19T11:42:57.000Z</published>
    <updated>2022-01-13T12:57:46.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dubbo整合springbooot多模块项目"><a href="#dubbo整合springbooot多模块项目" class="headerlink" title="dubbo整合springbooot多模块项目"></a>dubbo整合springbooot多模块项目</h1><p>介绍过dubbo和zookeeper之后，做一个简单的demo把它们整合到一起</p><p>dubbo主要有两种配置方式：基于xml配置和基于注解配置 本demo是基于注解配置</p><h2 id="一-项目搭建"><a href="#一-项目搭建" class="headerlink" title="一 项目搭建"></a>一 项目搭建</h2><a id="more"></a> <h3 id="父模块搭建"><a href="#父模块搭建" class="headerlink" title="父模块搭建"></a>父模块搭建</h3><p>新建一个文件夹springboot-dubbo-demo </p><p><img src="/2020/01/19/dubbo系列-三/1579859240190.png" alt="1579859240190"><br>右键new Model 新建一个项目</p><p><img src="/2020/01/19/dubbo系列-三/1579859328990.png" alt="1579859328990"></p><p>选择新建maven项目 </p><p><img src="/2020/01/19/dubbo系列-三/1579859463421.png" alt="1579859463421"></p><p>新建demo-parent 作为父项目 并添加dubbo、zookeeper相关依赖</p><p><img src="/2020/01/19/dubbo系列-三/1579859797785.png" alt="1579859797785"></p><p>demo-parent模块 pom文件代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.11.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dubbo-starter.version&gt;0.2.1.RELEASE&lt;/dubbo-starter.version&gt;</span><br><span class="line">        &lt;dubbo.version&gt;2.6.5&lt;/dubbo.version&gt;</span><br><span class="line">        &lt;zkclient.version&gt;0.10&lt;/zkclient.version&gt;</span><br><span class="line">        &lt;curator.version&gt;2.12.0&lt;/curator.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;dubbo-starter.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;curator.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="api模块搭建"><a href="#api模块搭建" class="headerlink" title="api模块搭建"></a>api模块搭建</h3><p>新建maven项目 demo-api 在此项目添加接口</p><p><img src="/2020/01/19/dubbo系列-三/1579860485751.png" alt="1579860485751"></p><p>新建一个测试接口TestService </p><p><img src="/2020/01/19/dubbo系列-三/1579861051264.png" alt="1579861051264"></p><h3 id="common-util模块搭建"><a href="#common-util模块搭建" class="headerlink" title="common-util模块搭建"></a>common-util模块搭建</h3><p><strong>管理依赖包和常用工具类</strong></p><p><img src="/2020/01/19/dubbo系列-三/1579908930867.png" alt="1579908930867"></p><p>demo-common-util模块 pom文件代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;demo-common-util&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;demo-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo-starter.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;curator.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="服务提供模块搭建"><a href="#服务提供模块搭建" class="headerlink" title="服务提供模块搭建"></a>服务提供模块搭建</h3><p><strong>将服务注册到zookeeper</strong></p><p>新建springboot项目  new model 选择springboot</p><p><img src="/2020/01/19/dubbo系列-三/1579861204109.png" alt="1579861204109"></p><p><img src="/2020/01/19/dubbo系列-三/1579861315992.png" alt="1579861315992"></p><p>实现TestService接口   dubbo提供了<code>@Service</code>注解，可将类声明为提供方，省去了大量配置的麻烦</p><p><img src="/2020/01/19/dubbo系列-三/1579909974830.png" alt="1579909974830"></p><p>配置文件 application.properties 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#服务启动端口号</span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line">#当前服务/应用的名字</span><br><span class="line">dubbo.application.name=demo-provider</span><br><span class="line"></span><br><span class="line">#注册中心的协议和地址</span><br><span class="line">dubbo.registry.protocol=zookeeper</span><br><span class="line">dubbo.registry.address=<span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span>:<span class="number">2181</span></span><br><span class="line"></span><br><span class="line">#通信规则（通信协议和接口）</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=<span class="number">20880</span></span><br><span class="line"></span><br><span class="line">#连接监控中心</span><br><span class="line">dubbo.monitor.protocol=registry</span><br><span class="line"></span><br><span class="line">#开启包扫描，可替代 @EnableDubbo 注解</span><br><span class="line">dubbo.scan.base-packages=com.example.demo</span><br></pre></td></tr></table></figure><p>pom文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;demo-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;demo-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;demo-provider&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;demo-common-util&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="服务消费者模块搭建"><a href="#服务消费者模块搭建" class="headerlink" title="服务消费者模块搭建"></a>服务消费者模块搭建</h3><p>新建springboot项目  new model </p><p><img src="/2020/01/19/dubbo系列-三/1579915603583.png" alt="1579915603583"></p><p>新建TestController 调用接口TestService  <strong>远程调用使用<code>@Reference</code> 注解</strong></p><p><img src="/2020/01/19/dubbo系列-三/1579918547679.png" alt="1579918547679"></p><p>application.properties 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8081</span></span><br><span class="line"></span><br><span class="line">dubbo.application.name=demo-consume</span><br><span class="line"></span><br><span class="line">dubbo.registry.protocol=zookeeper</span><br><span class="line">dubbo.registry.address=<span class="number">192.168</span><span class="number">.130</span><span class="number">.130</span>:<span class="number">2181</span></span><br><span class="line"></span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=<span class="number">20881</span></span><br><span class="line"></span><br><span class="line">dubbo.monitor.protocol=registry</span><br><span class="line"></span><br><span class="line">#开启包扫描，可替代 @EnableDubbo 注解</span><br><span class="line">dubbo.scan.base-packages=com.example.demo</span><br><span class="line"></span><br><span class="line">#关闭服务的启动时检查：（没有提供者时报错）</span><br><span class="line">dubbo.consumer.check=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>pom文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;demo-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;artifactId&gt;demo-consume&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;demo-consume&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;demo-common-util&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;demo-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="启动项目-访问地址"><a href="#启动项目-访问地址" class="headerlink" title="启动项目 访问地址"></a>启动项目 访问地址</h3><p>先后启动demo-provider demo-consume项目 然后在浏览器访问接口</p><p>返回相应结果说明项目整合成功</p><p><img src="/2020/01/19/dubbo系列-三/test.gif" alt="test"></p><h2 id="二-安装dubbo-admin"><a href="#二-安装dubbo-admin" class="headerlink" title="二 安装dubbo-admin"></a>二 安装dubbo-admin</h2><p>dubbo-admin可以理解为zookeeper的可视化界面，可以直观监控系统的各个服务器情况</p><p>在github上提供了dubbo-admin的源码，可以直接下载到本地，然后打包成war包，发布到tomcat</p><p>下载地址：<a href="https://github.com/apache/dubbo/tree/dubbo-2.6.0" target="_blank" rel="noopener">https://github.com/apache/dubbo/tree/dubbo-2.6.0</a></p><p>或者直接下载我已经打包好的war包 <a href="https://pan.baidu.com/s/1qbxrsM3F33jnOhUpIcq0Cg" target="_blank" rel="noopener">https://pan.baidu.com/s/1qbxrsM3F33jnOhUpIcq0Cg</a> 提取码：<code>46y8</code></p><p>直接把war包上传到tomcat下的webapps里 然后重新启动tomcat</p><p><img src="/2020/01/19/dubbo系列-三/1579934442998.png" alt="1579934442998"></p><p>在浏览器输入tomcat的访问地址，默认用户名密码都是<code>root</code></p><p><img src="/2020/01/19/dubbo系列-三/1579928314933.png" alt="1579928314933"></p><p>登录成功之后 点击服务治理==》应用 就可以看到注册到dubbo的服务了</p><p><img src="/2020/01/19/dubbo系列-三/1579934775455.png" alt="1579934775455"></p><p>一个简单的spring boot-dubbo整合完毕 </p><p>项目地址：<strong><a href="https://github.com/yuan2658/springboo-dubbo-demo" target="_blank" rel="noopener">https://github.com/yuan2658/springboo-dubbo-demo</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;dubbo整合springbooot多模块项目&quot;&gt;&lt;a href=&quot;#dubbo整合springbooot多模块项目&quot; class=&quot;headerlink&quot; title=&quot;dubbo整合springbooot多模块项目&quot;&gt;&lt;/a&gt;dubbo整合springbooot多模块项目&lt;/h1&gt;&lt;p&gt;介绍过dubbo和zookeeper之后，做一个简单的demo把它们整合到一起&lt;/p&gt;
&lt;p&gt;dubbo主要有两种配置方式：基于xml配置和基于注解配置 本demo是基于注解配置&lt;/p&gt;
&lt;h2 id=&quot;一-项目搭建&quot;&gt;&lt;a href=&quot;#一-项目搭建&quot; class=&quot;headerlink&quot; title=&quot;一 项目搭建&quot;&gt;&lt;/a&gt;一 项目搭建&lt;/h2&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/categories/dubbo/"/>
    
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/tags/dubbo/"/>
    
      <category term="java" scheme="http://blog.whitewater96.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux添加开机启动后失效问题</title>
    <link href="http://blog.whitewater96.top/2020/01/15/linux%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%90%8E%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.whitewater96.top/2020/01/15/linux添加开机启动后失效问题/</id>
    <published>2020-01-15T13:17:48.000Z</published>
    <updated>2022-01-13T12:57:46.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记一次linux添加开机启动后失效问题"><a href="#记一次linux添加开机启动后失效问题" class="headerlink" title="记一次linux添加开机启动后失效问题"></a>记一次linux添加开机启动后失效问题</h3><p>今天在linux系统上装了zookeeper，安装配置启动成功之后，顺便把zookeeper加到开机自启中，</p><p>于是输入命令 <code>vim /etc/rc.local</code> 在最后一行添加 <code>/opt/zookeeper-3.4.14/bin/zkServer.sh start</code></p><p>然后 <code>reboot</code> 重启</p><p>重启之后 输入命令<code>zkServer.sh stats</code>发现 zookeeper并没有启动</p><a id="more"></a><p>然后我查看之前添加到开机自启的服务tomcat和nginx也没有启动成功 在添加zookeeper之前是没有问题的</p><p>怎么回事呢 于是我去百度搜索 linux、rc.loacl、开机自启失败等有关文章之后 </p><p>发现大部分文章都在说开机自启失败是因为<code>/etc/rc.loacl</code>没有权限 </p><p>查看/etc/rc.loacl权限 正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /etc/rc.local</span><br><span class="line">lrwxrwxrwx. 1 root root 13 1月  10 09:28 /etc/rc.local -&gt; rc.d/rc.local</span><br></pre></td></tr></table></figure></p><p>查看/etc/rc.d/rc.local权限 正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /etc/rc.d/rc.local</span><br><span class="line">-rwxrwxrwx. 1 root root 652 1月  15 14:48 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>我这个应该不是权限问题</p><p>于是我去查看开机启动日志  <code>/var/log/message</code> 发现了报错日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localhost systemd: Failed at step EXEC spawning /etc/rc.d/rc.local: Exec format error</span><br><span class="line">localhost systemd: rc-local.service: control process exited, code=exited status=203</span><br><span class="line">localhost systemd: Failed to start /etc/rc.d/rc.local Compatibility.</span><br><span class="line">localhost systemd: Unit rc-local.service entered failed state.</span><br><span class="line">localhost systemd: rc-local.service failed.</span><br></pre></td></tr></table></figure></p><p>这里说 执行/etc/rc.d/rc.时出错 Exec格式错误  应该就是rc.local文件的问题 并且还说明了错误码</p><p>我接着去搜索 <code>code=exited status=203</code></p><p>发现原因： systemctl执行脚本时需要知道脚本的解释器</p><p>这有是关于linux运行脚本的知识了 大概了解一下</p><p>#!/bin/bash是指此脚本使用/bin/bash来解释执行。 每个脚本开头都必须使用”#!”</p><p>于是重新 <code>vim /etc/rc.local</code>突然发现了问题所在</p><p>第一行居然是空行（emmm，可能是我在编辑的时候多按了一下回车吧 ）</p><p>把第一行删除   #!/bin/bash 作为首行 然后保存退出 重启</p><p>输入 <code>zkServer.sh stats</code>发现启动成功 查看tomcat nginx 进程启动成功</p><p>ok 问题解决完毕！</p><p>因为一个空行引发的惨案  还是对linux的不熟悉导致的 太难了 还得多学习学习</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记一次linux添加开机启动后失效问题&quot;&gt;&lt;a href=&quot;#记一次linux添加开机启动后失效问题&quot; class=&quot;headerlink&quot; title=&quot;记一次linux添加开机启动后失效问题&quot;&gt;&lt;/a&gt;记一次linux添加开机启动后失效问题&lt;/h3&gt;&lt;p&gt;今天在linux系统上装了zookeeper，安装配置启动成功之后，顺便把zookeeper加到开机自启中，&lt;/p&gt;
&lt;p&gt;于是输入命令 &lt;code&gt;vim /etc/rc.local&lt;/code&gt; 在最后一行添加 &lt;code&gt;/opt/zookeeper-3.4.14/bin/zkServer.sh start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;reboot&lt;/code&gt; 重启&lt;/p&gt;
&lt;p&gt;重启之后 输入命令&lt;code&gt;zkServer.sh stats&lt;/code&gt;发现 zookeeper并没有启动&lt;/p&gt;
    
    </summary>
    
      <category term="bug" scheme="http://blog.whitewater96.top/categories/bug/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="bug" scheme="http://blog.whitewater96.top/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装和配置zookeeper</title>
    <link href="http://blog.whitewater96.top/2020/01/15/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEzookeeper/"/>
    <id>http://blog.whitewater96.top/2020/01/15/linux下安装和配置zookeeper/</id>
    <published>2020-01-15T12:11:55.000Z</published>
    <updated>2022-01-13T12:57:46.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-下载"><a href="#一-下载" class="headerlink" title="一 下载"></a>一 下载</h3><p>1.进入/opt目录</p><p>2.zookeeper安装包可以在官网下载</p><p>也可以在下面这个地址下载</p><p> <a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</a><br><a id="more"></a><br>如果链接打不开，就先打开 <a href="http://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper </a>， 再选择版本。</p><p>在此目录下载zookeeper安装包：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>3.解压</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><h3 id="二-配置"><a href="#二-配置" class="headerlink" title="二 配置"></a>二 配置</h3><p>1.进入conf目录，将zoo_sample.cfg这个文件复制为zoo.cfg (必须是这个文件名)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /opt/zookeeper-3.4.14/conf/</span><br><span class="line">[root@localhost conf]# cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>2.修改配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># dataDir：数据文件目录</span><br><span class="line"># Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</span><br><span class="line">dataDir=/data/soft/zookeeper/data</span><br><span class="line"># dataLogDir：日志文件目录</span><br><span class="line"># Zookeeper保存日志文件的目录。</span><br><span class="line">dataLogDir=/data/soft/zookeeper/logs</span><br></pre></td></tr></table></figure><p><img src="/2020/01/15/linux下安装和配置zookeeper/1579058015465.png" alt="1579058015465"></p><p>修改后</p><p><img src="/2020/01/15/linux下安装和配置zookeeper/1579058085124.png" alt="1579058085124"></p><p>3.启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper-3.4.14]# cd bin</span><br><span class="line">[root@localhost bin]# ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: /opt/zookeeper-<span class="number">3.4</span><span class="number">.14</span>/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><h3 id="三-启动"><a href="#三-启动" class="headerlink" title="三 启动"></a>三 启动</h3><p>1.查看是否启动成功</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./zkServer.sh status</span><br></pre></td></tr></table></figure><p><img src="/2020/01/15/linux下安装和配置zookeeper/1579058763426.png" alt="1579058763426"></p><p>或者</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ps -ef|grep zookeeper</span><br></pre></td></tr></table></figure><p><img src="/2020/01/15/linux下安装和配置zookeeper/1579058684585.png" alt="1579058684585"></p><p><strong>遇到问题怎么解决？</strong></p><p>zookeeper的出错日志会记录在 zookeeper.out。</p><p>当前处于哪个目录，执行完zkServer.sh start命令， zookeeper.out就会写在哪个目录。</p><p>vim zookeeper.out 可以查看报错信息。然后再搜索解决。</p><p>2.加入开机自启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>最后一行添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper-<span class="number">3.4</span><span class="number">.14</span>/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>重新启动centos7 服务器，再次验证zookeeper 服务是否正常启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 立即重启服务起</span><br><span class="line">reboot </span><br><span class="line">#查看zooKeeper 服务 相关指令</span><br><span class="line">[root@master bin]# ./zkServer.sh status</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-下载&quot;&gt;&lt;a href=&quot;#一-下载&quot; class=&quot;headerlink&quot; title=&quot;一 下载&quot;&gt;&lt;/a&gt;一 下载&lt;/h3&gt;&lt;p&gt;1.进入/opt目录&lt;/p&gt;
&lt;p&gt;2.zookeeper安装包可以在官网下载&lt;/p&gt;
&lt;p&gt;也可以在下面这个地址下载&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/categories/dubbo/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/tags/dubbo/"/>
    
      <category term="zookeeper" scheme="http://blog.whitewater96.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>dubbo系列(二 zookeeper简介)</title>
    <link href="http://blog.whitewater96.top/2020/01/15/dubbo%E7%B3%BB%E5%88%97-%E4%BA%8C/"/>
    <id>http://blog.whitewater96.top/2020/01/15/dubbo系列-二/</id>
    <published>2020-01-15T11:52:37.000Z</published>
    <updated>2022-01-13T12:57:46.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h1><p>dubbo官方推荐使用zookeeper注册中心。</p><p>就简单的来介绍一下zookeeper</p><h2 id="一-zookeeper是什么"><a href="#一-zookeeper是什么" class="headerlink" title="一 zookeeper是什么"></a>一 zookeeper是什么</h2><p>Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用。<br><a id="more"></a></p><p>上面的解释有点抽象，简单来说zookeeper=文件系统+监听通知机制。</p><p><strong>1、文件系统</strong></p><p>Zookeeper维护一个类似文件系统的数据结构：</p><p><img src="/2020/01/15/dubbo系列-二/dubbo2-1.jpg" alt></p><p>每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。</p><p><strong>2、 监听通知机制</strong></p><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p><p>就这么简单，下面我们看看Zookeeper能做点什么呢？</p><h2 id="二-zookeeper能做什么"><a href="#二-zookeeper能做什么" class="headerlink" title="二 zookeeper能做什么"></a>二 zookeeper能做什么</h2><h3 id="1-可以作为集群的管理工具使用。"><a href="#1-可以作为集群的管理工具使用。" class="headerlink" title="1.可以作为集群的管理工具使用。"></a>1.可以作为集群的管理工具使用。</h3><p>如果可以把zk扮演成交警的角色，而各个节点就是马路上的各种汽车（汽车，公交车），为了保证整个交通（系统）的可用性，zookeeper必须知道每一节点的健康状态（公交车是否出了问题，要派新的公交【服务注册与发现】），公路在上下班高峰是否拥堵，在某一条很窄的路上只允许单独一个方向的汽车通过【分布式锁】。</p><p>如果交通警察是交通系统的指挥官，而zookeeper就是各个节点组成分布式系统的指挥官。</p><h3 id="2-可以集中管理配置文件。"><a href="#2-可以集中管理配置文件。" class="headerlink" title="2.可以集中管理配置文件。"></a>2.可以集中管理配置文件。</h3><p>1.公共配置抽取存放于zookeeper中并落地数据库</p><p>2.对公共配置修改后发布到zookeeper中并落地数据库</p><p>3.对应用开启配置实时监听，zookeeper配置文件一旦被修改，应用可实时监听到并获取</p><h3 id="3-分布式锁"><a href="#3-分布式锁" class="headerlink" title="3.分布式锁"></a>3.分布式锁</h3><p>zookeeper 分布式锁应用了临时顺序节点</p><p><strong>获取锁</strong></p><ul><li>系统A拿到<code>/locks</code>节点下的所有子节点，经过比较，发现自己(<code>id_000000</code>)，是所有子节点最小的。所以得到锁</li><li>系统B拿到<code>/locks</code>节点下的所有子节点，经过比较，发现自己(<code>id_000002</code>)，不是所有子节点最小的。所以监听比自己小1的节点<code>id_000001</code>的状态</li><li>系统C拿到<code>/locks</code>节点下的所有子节点，经过比较，发现自己(<code>id_000001</code>)，不是所有子节点最小的。所以监听比自己小1的节点<code>id_000000</code>的状态</li><li>……</li><li>等到系统A执行完操作以后，将自己创建的节点删除(<code>id_000000</code>)。通过监听，系统C发现<code>id_000000</code>节点已经删除了，发现自己已经是最小的节点了，于是顺利拿到锁</li><li>….系统B如上</li></ul><p><strong>释放锁</strong></p><ul><li>任务完成，客户端显示释放</li><li>任务执行过程中，客户端崩溃</li></ul><h2 id="三-zookeeper在dubbo中的应用"><a href="#三-zookeeper在dubbo中的应用" class="headerlink" title="三 zookeeper在dubbo中的应用"></a>三 zookeeper在dubbo中的应用</h2><p><img src="/2020/01/15/dubbo系列-二/zookeeper.jpg" alt></p><p>流程说明：</p><ul><li>服务提供者启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li><li>服务消费者启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li><li>监控中心启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址。</li></ul><p>支持以下功能：</p><ul><li>当提供者出现断电等异常停机时，注册中心能自动删除提供者信息</li><li>当注册中心重启时，能自动恢复注册数据，以及订阅请求</li><li>当会话过期时，能自动恢复注册数据，以及订阅请求</li><li>当设置 <code>&lt;dubbo:registry check=&quot;false&quot; /&gt;</code> 时，记录失败注册和订阅请求，后台定时重试</li><li>可通过 <code>&lt;dubbo:registry username=&quot;admin&quot; password=&quot;1234&quot; /&gt;</code> 设置 zookeeper 登录信息</li><li>可通过 <code>&lt;dubbo:registry group=&quot;dubbo&quot; /&gt;</code> 设置 zookeeper 的根节点，不配置将使用默认的根节点。</li><li>支持 <code>*</code> 号通配符 <code>&lt;dubbo:reference group=&quot;*&quot; version=&quot;*&quot; /&gt;</code>，可订阅服务的所有分组和所有版本的提供者</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;zookeeper简介&quot;&gt;&lt;a href=&quot;#zookeeper简介&quot; class=&quot;headerlink&quot; title=&quot;zookeeper简介&quot;&gt;&lt;/a&gt;zookeeper简介&lt;/h1&gt;&lt;p&gt;dubbo官方推荐使用zookeeper注册中心。&lt;/p&gt;
&lt;p&gt;就简单的来介绍一下zookeeper&lt;/p&gt;
&lt;h2 id=&quot;一-zookeeper是什么&quot;&gt;&lt;a href=&quot;#一-zookeeper是什么&quot; class=&quot;headerlink&quot; title=&quot;一 zookeeper是什么&quot;&gt;&lt;/a&gt;一 zookeeper是什么&lt;/h2&gt;&lt;p&gt;Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/categories/dubbo/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/tags/dubbo/"/>
    
      <category term="zookeeper" scheme="http://blog.whitewater96.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装和配置nginx</title>
    <link href="http://blog.whitewater96.top/2020/01/13/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEnginx/"/>
    <id>http://blog.whitewater96.top/2020/01/13/linux下安装和配置nginx/</id>
    <published>2020-01-13T12:19:16.000Z</published>
    <updated>2022-01-13T12:57:46.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux下安装和配nginx"><a href="#linux下安装和配nginx" class="headerlink" title="linux下安装和配nginx"></a><strong>linux下安装和配nginx</strong></h1><h2 id="一-nginx简介"><a href="#一-nginx简介" class="headerlink" title="一 nginx简介"></a>一 nginx简介</h2><p>​        Nginx同Apache一样都是一种WEB服务器。基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。</p><p>​        Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。<br><a id="more"></a></p><h2 id="二-下载与安装"><a href="#二-下载与安装" class="headerlink" title="二 下载与安装"></a>二 下载与安装</h2><p>在nginx官网下载压缩包 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载地址</a></p><p>也可以使用<code>wegt</code>命令直接下载压缩包 <code>wget http://nginx.org/download/nginx-1.14.2.tar.gz</code></p><p><img src="/2020/01/13/linux下安装和配置nginx/1578921872649.png" alt="1578921872649"></p><p>上传到服务器opt目录下</p><p><img src="/2020/01/13/linux下安装和配置nginx/1578922383347.png" alt="1578922383347"></p><p>解压 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# tar -zxvf nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure><h2 id="三-nginx的配置"><a href="#三-nginx的配置" class="headerlink" title="三 nginx的配置"></a>三 nginx的配置</h2><p>安装依赖包  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>移动文件到<code>/usr/local/nginx</code>下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 opt]# mv /opt/nginx-1.14.2 /usr/local/nginx</span><br></pre></td></tr></table></figure><p>进入nginx目录，执行命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# ./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p><img src="/2020/01/13/linux下安装和配置nginx/1578923372502.png" alt="1578923372502"></p><p>执行编译安装命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行编译命令 </span></span><br><span class="line"><span class="comment">//make （make的过程是把各种语言写的源码文件，变成可执行文件和各种库文件）</span></span><br><span class="line">[root@192 nginx]# make</span><br><span class="line"><span class="comment">//执行安装命令</span></span><br><span class="line"><span class="comment">//make install  （make install是把这些编译出来的可执行文件和库文件复制到合适的地方）</span></span><br><span class="line">[root@192 nginx]# make install</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# ./sbin/nginx -t</span><br></pre></td></tr></table></figure><p><strong>错误信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx: [alert] could not open error log file: open() <span class="string">"/usr/local/nginx/logs/error.log"</span> failed (<span class="number">2</span>: No such file or directory)</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">2020/01/13 21:51:31 [emerg] 4419#0: open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed</span><br></pre></td></tr></table></figure><p>原因分析：nginx/目录下没有logs文件夹</p><p><strong>解决方法</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# mkdir logs</span><br><span class="line">[root@192 nginx]# chmod 700 logs</span><br></pre></td></tr></table></figure><p>正常情况的信息输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# cd /usr/local/nginx/sbin</span><br><span class="line">[root@192 sbin]# ./nginx</span><br></pre></td></tr></table></figure><p>在浏览器中输入服务器的ip地址，如：192.168.130.128</p><p>很不幸，打不开链接</p><p><img src="/2020/01/13/linux下安装和配置nginx/1578924273290.png" alt="1578924273290"></p><p>查看服务器的80端口是否打开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# firewall-cmd --query-port=80/tcp</span><br><span class="line">no</span><br></pre></td></tr></table></figure><p>开启80端口（ –permanent   #永久生效，没有此参数重启后失效）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">#重启防火墙</span><br><span class="line">[root@192 sbin]# systemctl restart firewalld</span><br></pre></td></tr></table></figure><p>刷新浏览器</p><p><img src="/2020/01/13/linux下安装和配置nginx/1578924348170.png" alt="1578924348170"></p><p><strong>=======配置完毕！======</strong></p><p>配置nginx 开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p><img src="/2020/01/13/linux下安装和配置nginx/1578924474929.png" alt="1578924474929"></p><p>###参考文献<br><a href="https://www.cnblogs.com/xxoome/p/5866475.html" target="_blank" rel="noopener">https://www.cnblogs.com/xxoome/p/5866475.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux下安装和配nginx&quot;&gt;&lt;a href=&quot;#linux下安装和配nginx&quot; class=&quot;headerlink&quot; title=&quot;linux下安装和配nginx&quot;&gt;&lt;/a&gt;&lt;strong&gt;linux下安装和配nginx&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-nginx简介&quot;&gt;&lt;a href=&quot;#一-nginx简介&quot; class=&quot;headerlink&quot; title=&quot;一 nginx简介&quot;&gt;&lt;/a&gt;一 nginx简介&lt;/h2&gt;&lt;p&gt;​        Nginx同Apache一样都是一种WEB服务器。基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。&lt;/p&gt;
&lt;p&gt;​        Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.whitewater96.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="nginx" scheme="http://blog.whitewater96.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装和配置maven</title>
    <link href="http://blog.whitewater96.top/2020/01/09/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEmaven/"/>
    <id>http://blog.whitewater96.top/2020/01/09/linux下安装和配置maven/</id>
    <published>2020-01-09T13:23:49.000Z</published>
    <updated>2022-01-13T12:57:46.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux下安装和配置maven"><a href="#linux下安装和配置maven" class="headerlink" title="linux下安装和配置maven"></a><strong>linux下安装和配置maven</strong></h1><h2 id="1-Linux下的Maven下载安装"><a href="#1-Linux下的Maven下载安装" class="headerlink" title="1.Linux下的Maven下载安装"></a>1.Linux下的Maven下载安装</h2><p>安装包下载    <a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven官网</a></p><p><img src="/2020/01/09/linux下安装和配置maven/1578571857233.png" alt="1578571857233"></p><a id="more"></a><p>上传到服务器</p><p><img src="/2020/01/09/linux下安装和配置maven/1578572009404.png" alt="1578572009404"></p><p>解压文件   解压命令 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf apache-maven-<span class="number">3.6</span><span class="number">.3</span>-bin.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/linux下安装和配置maven/1578572096469.png" alt="1578572096469"></p><h2 id="2-配置maven参数"><a href="#2-配置maven参数" class="headerlink" title="2.配置maven参数"></a>2.配置maven参数</h2><p>修改环境变量     </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# vim /etc/profile</span><br></pre></td></tr></table></figure><p>在 <code>/etc/profile</code>  中添加以下几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME=/opt/apache-maven-<span class="number">3.6</span><span class="number">.3</span></span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/linux下安装和配置maven/1578573751376.png" alt="1578573751376"></p><p>执行 <code>source /etc/profile</code> 使环境变量生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# mvn -version</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/linux下安装和配置maven/1578573669374.png" alt="1578573669374"></p><p><strong>出现上图说明安装成功！</strong></p><h2 id="3-配置maven仓库地址"><a href="#3-配置maven仓库地址" class="headerlink" title="3.配置maven仓库地址"></a>3.配置maven仓库地址</h2><p>配置阿里云镜像仓库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim setting.xml</span><br></pre></td></tr></table></figure><p>定位到mirrors节点添加下面配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里云镜像仓库 --&gt;</span><br><span class="line"> &lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line"> &lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/linux下安装和配置maven/1578574267171.png" alt="1578574267171"></p><p>配置本地仓库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/home/maven/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/09/linux下安装和配置maven/1578574798992.png" alt="1578574798992"></p><p><strong>maven配置完成！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux下安装和配置maven&quot;&gt;&lt;a href=&quot;#linux下安装和配置maven&quot; class=&quot;headerlink&quot; title=&quot;linux下安装和配置maven&quot;&gt;&lt;/a&gt;&lt;strong&gt;linux下安装和配置maven&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-Linux下的Maven下载安装&quot;&gt;&lt;a href=&quot;#1-Linux下的Maven下载安装&quot; class=&quot;headerlink&quot; title=&quot;1.Linux下的Maven下载安装&quot;&gt;&lt;/a&gt;1.Linux下的Maven下载安装&lt;/h2&gt;&lt;p&gt;安装包下载    &lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maven官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/09/linux下安装和配置maven/1578571857233.png&quot; alt=&quot;1578571857233&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.whitewater96.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="maven" scheme="http://blog.whitewater96.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装和配置tomcat</title>
    <link href="http://blog.whitewater96.top/2020/01/07/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEtomcat/"/>
    <id>http://blog.whitewater96.top/2020/01/07/linux下安装和配置tomcat/</id>
    <published>2020-01-07T13:23:50.000Z</published>
    <updated>2022-01-13T12:57:46.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux配置tomcat"><a href="#linux配置tomcat" class="headerlink" title="linux配置tomcat"></a><strong>linux配置tomcat</strong></h1><h2 id="一-tomcat简介"><a href="#一-tomcat简介" class="headerlink" title="一.tomcat简介"></a>一.tomcat简介</h2><p>​    <code>Tomcat</code>是<code>Apache</code> 软件基金会（<code>Apache Software Foundation</code>）的<code>Jakarta</code> 项目中的一个核心项目。因为<code>Tomcat</code> 技术先进、性能稳定，而且免费，因而深受<code>Java</code>爱好者的喜爱，并得到了部分软件开发商的认可，成为目前比较流行的<code>Web</code> 应用服务器。<br><a id="more"></a></p><p>​    <code>Tomcat</code>服务器是一个免费的开放源代码的<code>Web</code> 应用服务器，属于轻量级应用服务器。</p><p>​    当配置正确时，<code>Apache</code> 为<code>HTML</code>页面服务，而<code>Tomcat</code> 实际上运行<code>JSP</code> 页面和<code>Servlet</code>。另外，<code>Tomcat</code>还是一个<code>Servlet</code>和<code>JSP</code>容器，独立的<code>Servlet</code>容器是<code>Tomcat</code>的默认模式。不过，<code>Tomcat</code>处理静态<code>HTML</code>的能力不如<code>Apache</code>服务器。目前<code>Tomcat</code>最新版本为<strong>9.0.30</strong>。</p><p>官网：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p><h2 id="二-tomcat下载和安装"><a href="#二-tomcat下载和安装" class="headerlink" title="二.tomcat下载和安装"></a>二.tomcat下载和安装</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>​    安装tomcat之前要先安装jdk，见<a href="https://blog.yuanww.cn/2019/12/27/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEjdk/" target="_blank" rel="noopener">linux下安装和配置jdk</a>。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>​    先从tomcat网站上下载最新的gz安装包</p><p><a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">tomcat官网下载页面</a></p><p>​    找到linux对应的tomcat安装包</p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578405162547.png" alt="1578405162547"></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>​    使用<code>ftp</code>工具（我这里使用的是<code>FileZilla</code>）将下载好的文件上传到服务器 <code>/opt</code> 目录下</p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578405812010.png" alt="1578405812010"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>​    进入opt目录，解压文件 </p><p>​    解压命令 <code>tar -xzvf  apache-tomcat-9.0.30.tar.gz</code> </p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578405860157.png" alt="1578405860157"></p><h2 id="三-tomcat配置"><a href="#三-tomcat配置" class="headerlink" title="三.tomcat配置"></a>三.tomcat配置</h2><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>编辑环境变量配置文件：<code>vim /etc/profile</code><br> 在文件末尾位置添加如下内容(<code>CATALINA_HOME</code>为安装tomcat的路径)<br> <code>export CATALINA_HOME=/opt/apache-tomcat-9.0.30</code><br> 通过vim的 <code>&quot;:wq&quot;</code> 命令进行保存退出<br> 使配置生效：<code>source /etc/profile</code></p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578406873862.png" alt="1578406873862"></p><h3 id="字符集配置"><a href="#字符集配置" class="headerlink" title="字符集配置"></a>字符集配置</h3><p>进入tomcat安装目录的conf目录，编辑<code>server.xml</code>文件<br> <code>cd /opt/apache-tomcat-9.0.30/conf</code><br> <code>vim server.xml</code><br> 找到配置8080端口的位置，在节点末尾添加<code>URIEncoding=&quot;UTF-8&quot;</code><br><code>&quot;:wq&quot;</code> 命令进行保存退出</p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578407111469.png" alt="1578407111469"></p><h3 id="tomcat验证"><a href="#tomcat验证" class="headerlink" title="tomcat验证"></a>tomcat验证</h3><p>进入tomcat安装目录的bin目录，执行<code>./startup.sh</code>，看到如图提示代表启动成功。</p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578407254490.png" alt="1578407254490"></p><p>可以通过主机的ip地址+8080端口访问tomcat主页，比如：<a href="http://192.168.130.128:8080/" target="_blank" rel="noopener">http://192.168.130.128:8080/</a><br>需要注意检查防火墙是否关闭，如果未关闭需要配置iptables规则开放8080端口。<br>关闭iptables防火墙：<code>chkconfig iptables off</code><br>关闭firewall防火墙 ：<code>service firewalld stop</code></p><h3 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h3><p>成功启动后浏览器输入<a href="http://192.168.130.128:8080/查看信息（ip为服务器ip）" target="_blank" rel="noopener">http://192.168.130.128:8080/查看信息（ip为服务器ip）</a></p><p><img src="/2020/01/07/linux下安装和配置tomcat/1578407446822.png" alt="1578407446822"></p><p>出现上图所示，说明大功告成！</p><p>至此，tomcat安装完成，后续可添加项目重启tomcat服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux配置tomcat&quot;&gt;&lt;a href=&quot;#linux配置tomcat&quot; class=&quot;headerlink&quot; title=&quot;linux配置tomcat&quot;&gt;&lt;/a&gt;&lt;strong&gt;linux配置tomcat&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-tomcat简介&quot;&gt;&lt;a href=&quot;#一-tomcat简介&quot; class=&quot;headerlink&quot; title=&quot;一.tomcat简介&quot;&gt;&lt;/a&gt;一.tomcat简介&lt;/h2&gt;&lt;p&gt;​    &lt;code&gt;Tomcat&lt;/code&gt;是&lt;code&gt;Apache&lt;/code&gt; 软件基金会（&lt;code&gt;Apache Software Foundation&lt;/code&gt;）的&lt;code&gt;Jakarta&lt;/code&gt; 项目中的一个核心项目。因为&lt;code&gt;Tomcat&lt;/code&gt; 技术先进、性能稳定，而且免费，因而深受&lt;code&gt;Java&lt;/code&gt;爱好者的喜爱，并得到了部分软件开发商的认可，成为目前比较流行的&lt;code&gt;Web&lt;/code&gt; 应用服务器。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.whitewater96.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="java" scheme="http://blog.whitewater96.top/tags/java/"/>
    
      <category term="tomcat" scheme="http://blog.whitewater96.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>dubbo系列(一 dubbo简介)</title>
    <link href="http://blog.whitewater96.top/2020/01/07/dubbo%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
    <id>http://blog.whitewater96.top/2020/01/07/dubbo系列-一/</id>
    <published>2020-01-07T08:28:16.000Z</published>
    <updated>2022-01-13T12:57:46.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-dubbo是什么"><a href="#一-dubbo是什么" class="headerlink" title="一 dubbo是什么"></a>一 dubbo是什么</h2><p>在介绍dubbo之前先了解一些概念，soa和rpc</p><h3 id="soa的简单介绍"><a href="#soa的简单介绍" class="headerlink" title="soa的简单介绍"></a>soa的简单介绍</h3><p><strong>Service-Oriented Architecture（SOA）面向服务架构</strong></p><p>​        面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构件在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。<br><a id="more"></a></p><p>​        SOA是一种粗粒度、松耦合服务架构，服务之间通过简单、精确定义接口进行通讯，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。服务层是SOA的基础，可以直接被应用调用，从而有效控制系统中与软件代理交互的人为依赖性。</p><h3 id="rpc的简单介绍"><a href="#rpc的简单介绍" class="headerlink" title="rpc的简单介绍"></a>rpc的简单介绍</h3><p><strong>Romote Procedure Call（RPC）远程过程调用</strong></p><p>​        rpc就是一种进程间的通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。</p><p>​        比如两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数或者方法，由于不在一个内存空间，不能直接调用，这时候需要通过就可以应用RPC框架的实现来解决。</p><p><img src="/2020/01/07/dubbo系列-一/rpc.jpg" alt="RPC架构图"></p><p>​                                                                                        RPC架构图</p><h3 id="dubbo的简单介绍"><a href="#dubbo的简单介绍" class="headerlink" title="dubbo的简单介绍"></a>dubbo的简单介绍</h3><p><strong>Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</strong></p><ul><li><p>一款分布式服务框架</p></li><li><p>高性能和透明化的RPC远程服务调用方案</p></li><li><p>SOA服务治理方案</p></li></ul><h2 id="二-为什么要用dubbo"><a href="#二-为什么要用dubbo" class="headerlink" title="二 为什么要用dubbo"></a>二 为什么要用dubbo</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="/2020/01/07/dubbo系列-一/dubbo-architecture-roadmap.jpg" alt="架构演变"></p><p>​                                                                            互联网应用架构发展图</p><h4 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h4 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h4 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h4 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="/2020/01/07/dubbo系列-一/dubbo-service-governance.jpg" alt="服务治理"></p><p>在大规模服务化之前，应用可能只是通过 RMI 或 Hessian 等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过 F5 等硬件进行负载均衡。</p><p><strong>当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大。</strong> 此时需要一个服务注册中心，动态地注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本。</p><p><strong>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。</strong> 这时，需要自动画出应用间的依赖关系图，以帮助架构师理清关系。</p><p><strong>接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</strong> 为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阈值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</p><p>以上是 Dubbo 最基本的几个需求。</p><h2 id="三-dubbo技术架构"><a href="#三-dubbo技术架构" class="headerlink" title="三 dubbo技术架构"></a>三 dubbo技术架构</h2><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><p>首先，上一张图（摘自官网）。</p><p><img src="/2020/01/07/dubbo系列-一/dubbo-architecture.jpg" alt="架构图">  </p><h3 id="节点角色说明"><a href="#节点角色说明" class="headerlink" title="节点角色说明"></a>节点角色说明</h3><table><thead><tr><th>节点</th><th style="text-align:left">角色说明</th></tr></thead><tbody><tr><td>Provider</td><td style="text-align:left">暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td style="text-align:left">调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td style="text-align:left">服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td style="text-align:left">统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td style="text-align:left">服务运行容器</td></tr></tbody></table><h3 id="调用关系说明"><a href="#调用关系说明" class="headerlink" title="调用关系说明"></a>调用关系说明</h3><p><strong> 0. 服务容器负责启动，加载，运行服务提供者。</strong></p><p><strong> 1. 服务提供者在启动时，向注册中心注册自己提供的服务。</strong></p><p><strong> 2. 服务消费者在启动时，向注册中心订阅自己所需的服务。</strong></p><p><strong> 3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</strong></p><p><strong> 4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</strong></p><p><strong> 5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</strong></p><h2 id="四-dubbo实现原理"><a href="#四-dubbo实现原理" class="headerlink" title="四 dubbo实现原理"></a>四 dubbo实现原理</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="/2020/01/07/dubbo系列-一/zhixingliucheng.jpg" alt="执行流程"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>client一个线程调用远程接口，生成一个唯一的ID（比如一段随机字符串，UUID等），Dubbo是使用AtomicLong从0开始累计数字的</li><li>将打包的方法调用信息（如调用的接口名称，方法名称，参数值列表等），和处理结果的回调对象callback，全部封装在一起，组成一个对象object</li><li>向专门存放调用信息的全局ConcurrentHashMap里面put(ID, object)</li><li>将ID和打包的方法调用信息封装成一对象connRequest，使用IoSession.write(connRequest)异步发送出去</li><li>当前线程再使用callback的get()方法试图获取远程返回的结果，在get()内部，则使用synchronized获取回调对象callback的锁， 再先检测是否已经获取到结果，如果没有，然后调用callback的wait()方法，释放callback上的锁，让当前线程处于等待状态。</li><li>服务端接收到请求并处理后，将结果（此结果中包含了前面的ID，即回传）发送给客户端，客户端socket连接上专门监听消息的线程收到消息，分析结果，取到ID，再从前面的ConcurrentHashMap里面get(ID)，从而找到callback，将方法调用结果设置到callback对象里。</li><li>监听线程接着使用synchronized获取回调对象callback的锁（因为前面调用过wait()，那个线程已释放callback的锁了），再notifyAll()，唤醒前面处于等待状态的线程继续执行（callback的get()方法继续执行就能拿到调用结果了），至此，整个过程结束</li></ol><h2 id="五-dubbo与springCloud区别"><a href="#五-dubbo与springCloud区别" class="headerlink" title="五 dubbo与springCloud区别"></a>五 dubbo与springCloud区别</h2><h3 id="Spring-Cloud与Dubbo功能对比"><a href="#Spring-Cloud与Dubbo功能对比" class="headerlink" title="Spring Cloud与Dubbo功能对比"></a>Spring Cloud与Dubbo功能对比</h3><table><thead><tr><th>功能名称</th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>ZooKeeper</td><td>Spring Cloud Netflix Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p>最大的区别:Spring Cloud抛弃了Dubbo 的RPC通信，采用的是基于HTTP的REST方式。<br>严格来说，这两种方式各有优劣。虽然在一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更为合适。</p><h3 id="dubbo的缺点"><a href="#dubbo的缺点" class="headerlink" title="dubbo的缺点"></a>dubbo的缺点</h3><ul><li><p>Registry 严重依赖第三方组件（ZooKeeper 或者 Redis），当这些组件出现问题时，服务调用很快就会中断。</p></li><li><p>Dubbo 只支持 RPC 调用。这使得服务提供方与调用方在代码上产生了强依赖，服务提供方需要不断将包含公共代码的 Jar 包打包出来供消费方使用。一旦打包出现问题，就会导致服务调用出错</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Dubbo和Spring Cloud并不是完全的竞争关系，两者所解决的问题域不一样：Dubbo的定位始终是一款RPC框架，而Spring Cloud的目的是微服务架构下的一站式解决方案。非要比较的话，Dubbo可以类比到Netflix OSS技术栈，而Spring Cloud集成了Netflix OSS作为分布式服务治理解决方案，但除此之外Spring Cloud还提供了包括config、stream、security、sleuth等分布式服务解决方案。<br>当前由于RPC协议、注册中心元数据不匹配等问题，在面临微服务基础框架选型时Dubbo与Spring Cloud只能二选一，这也是两者总拿来做对比的原因。Dubbo之后会积极寻求适配到Spring Cloud生态，比如作为SpringCloud的二进制通讯方案来发挥Dubbo的性能优势，或者Dubbo通过模块化以及对http的支持适配到Spring Cloud</p><h2 id="六-参考文献"><a href="#六-参考文献" class="headerlink" title="六 参考文献"></a>六 参考文献</h2><p><a href="https://blog.csdn.net/zpoison/article/details/80729052" target="_blank" rel="noopener">https://blog.csdn.net/zpoison/article/details/80729052</a></p><p><a href="https://segmentfault.com/a/1190000019896723" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019896723</a></p><p><a href="http://dubbo.apache.org/zh-cn/docs" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs</a></p><p><a href="http://c.biancheng.net/view/5310.html" target="_blank" rel="noopener">http://c.biancheng.net/view/5310.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-dubbo是什么&quot;&gt;&lt;a href=&quot;#一-dubbo是什么&quot; class=&quot;headerlink&quot; title=&quot;一 dubbo是什么&quot;&gt;&lt;/a&gt;一 dubbo是什么&lt;/h2&gt;&lt;p&gt;在介绍dubbo之前先了解一些概念，soa和rpc&lt;/p&gt;
&lt;h3 id=&quot;soa的简单介绍&quot;&gt;&lt;a href=&quot;#soa的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;soa的简单介绍&quot;&gt;&lt;/a&gt;soa的简单介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Service-Oriented Architecture（SOA）面向服务架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构件在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/categories/dubbo/"/>
    
    
      <category term="dubbo" scheme="http://blog.whitewater96.top/tags/dubbo/"/>
    
      <category term="java" scheme="http://blog.whitewater96.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装和配置jdk</title>
    <link href="http://blog.whitewater96.top/2019/12/27/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEjdk/"/>
    <id>http://blog.whitewater96.top/2019/12/27/linux下安装和配置jdk/</id>
    <published>2019-12-26T16:38:30.000Z</published>
    <updated>2022-01-13T12:57:46.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux下安装和配置jdk"><a href="#linux下安装和配置jdk" class="headerlink" title="linux下安装和配置jdk"></a><strong>linux下安装和配置jdk</strong></h1><h2 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1.下载jdk"></a>1.下载jdk</h2><p>​    Jdk下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">点击下载</a></p><p><img src="/2019/12/27/linux下安装和配置jdk/1577365354266.png" alt="1577365354266"><br><a id="more"></a><br>下载linux x64 64位的 tar.gz文件</p><blockquote><p>现在oracle下载文件需要登录账号 直接在百度搜索oracle账号 就可以下载了</p></blockquote><h2 id="2-解压jdk"><a href="#2-解压jdk" class="headerlink" title="2.解压jdk"></a>2.解压jdk</h2><p>利用ftp软件把下载好的压缩包上传到服务器opt目录下</p><blockquote><p>网上有很多ftp连接工具 我这里使的是FileZilla </p></blockquote><p><img src="/2019/12/27/linux下安装和配置jdk/1577365540558.png" alt="1577365540558"></p><p>进入opt目录 输入解压命令 然后回车即可 解压命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf jdk-<span class="number">8</span>u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p><img src="/2019/12/27/linux下安装和配置jdk/1577365645647.png" alt="1577365645647"></p><p>解压之后 用<code>ls</code>命令查看opt文件夹 如果有jdk文件夹 说明解压成功</p><p><img src="/2019/12/27/linux下安装和配置jdk/1577365907059.png" alt="1577365907059"></p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h2><p>（1）编辑/etc/profile文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></p><p>（2）按<code>Insert</code>或者<code>I</code>键，切换成编辑模式。大写G跳到最后，按图片输入下面一段话。</p><p><img src="/2019/12/27/linux下安装和配置jdk/1577367078041.png" alt="1577367078041"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1<span class="number">.8</span><span class="number">.0_231</span></span><br><span class="line">export CLASSPATH=.:JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>（3）按<code>Esc</code>退出编辑模式，输入<code>:wq</code>保存并退出</p><p><img src="/2019/12/27/linux下安装和配置jdk/1577367095852.png" alt="1577367095852"></p><p>（4）生效环境变量</p><p>​        对于/etc/profile编写完成之后是不够的，还需要最后一个步骤，就是让刚刚我们修改的文件变成有效起来，所以我们再输入一个命令，让修改生效。<br>生效命令：<code>source /etc/profile</code></p><p><img src="/2019/12/27/linux下安装和配置jdk/1577366806622.png" alt="1577366806622"></p><p>（5）验证是否配置成功</p><p>输入命令<code>java -version</code> 如下图所示 说明配置成功</p><p><img src="/2019/12/27/linux下安装和配置jdk/1577367132356.png" alt="1577367132356"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux下安装和配置jdk&quot;&gt;&lt;a href=&quot;#linux下安装和配置jdk&quot; class=&quot;headerlink&quot; title=&quot;linux下安装和配置jdk&quot;&gt;&lt;/a&gt;&lt;strong&gt;linux下安装和配置jdk&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-下载jdk&quot;&gt;&lt;a href=&quot;#1-下载jdk&quot; class=&quot;headerlink&quot; title=&quot;1.下载jdk&quot;&gt;&lt;/a&gt;1.下载jdk&lt;/h2&gt;&lt;p&gt;​    Jdk下载地址：&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/27/linux下安装和配置jdk/1577365354266.png&quot; alt=&quot;1577365354266&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.whitewater96.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="java" scheme="http://blog.whitewater96.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>VMware虚拟机安装Centos7</title>
    <link href="http://blog.whitewater96.top/2019/12/23/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos7/"/>
    <id>http://blog.whitewater96.top/2019/12/23/VMware虚拟机安装Centos7/</id>
    <published>2019-12-23T14:30:56.000Z</published>
    <updated>2022-01-13T12:57:46.309Z</updated>
    
    <content type="html"><![CDATA[<p>#VMware虚拟机安装Centos7</p><h2 id="一-虚拟机的介绍"><a href="#一-虚拟机的介绍" class="headerlink" title="一.虚拟机的介绍"></a>一.虚拟机的介绍</h2><p>​          VMWare (Virtual Machine ware)是一个虚拟机软件，它可以使你在一台机器上同时运行二个或更多Windows、DOS、LINUX系统。“多启动”系统（Win10+Win7双系统）开机时只能选择其中一个运行，切换系统则需要重新启动机器。与之相比，VMWare在某种意义上可算是多系统“同时”运行。通过下载安装VMware Workstation，相当于在Windows系统里再安装了一个Windows系统，而且它还可以像应用程序那样进行切换。每个虚拟机操作系统你都可以进行虚拟的分区、配置而不影响真实硬盘的数据，甚至可以通过网卡将几台虚拟机用网卡连接为一个局域网，极其方便。</p><h2 id="二-Cetnos7镜像的下载"><a href="#二-Cetnos7镜像的下载" class="headerlink" title="二.Cetnos7镜像的下载"></a>二.Cetnos7镜像的下载</h2><p>阿里云站点：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p><p>每个链接都包括了镜像文件的地址、类型及版本号等信息<br><a id="more"></a><br><img src="/2019/12/23/VMware虚拟机安装Centos7/1577106901145.png" alt="1577106901145"></p><p>进入阿里云站点，选择 <strong>CentOS-7-x86_64-DVD-1908.iso下载</strong></p><table><thead><tr><th style="text-align:left">各个版本的ISO镜像文件说明：</th><th></th></tr></thead><tbody><tr><td style="text-align:left">CentOS-7-x86_64-DVD-1908.iso</td><td>标准安装版（推荐）</td></tr><tr><td style="text-align:left">CentOS-7-x86_64-Everything-1908.iso</td><td>完整版，集成所有软件</td></tr><tr><td style="text-align:left">CentOS-7-x86_64-LiveGNOME-1908.iso</td><td>GNOME桌面版</td></tr><tr><td style="text-align:left">CentOS-7-x86_64-LiveKDE-1908.iso</td><td>KDE桌面版</td></tr><tr><td style="text-align:left">CentOS-7-x86_64-Minimal-1908.iso</td><td>精简版，自带的软件最少</td></tr><tr><td style="text-align:left">CentOS-7-x86_64-NetInstall-1908.iso</td><td>网络安装版（从网络安装）</td></tr></tbody></table><h2 id="三-VMware的安装"><a href="#三-VMware的安装" class="headerlink" title="三.VMware的安装"></a>三.VMware的安装</h2><p>VMware 有两个版本，分别是 VMware Workstation Pro 和 VMware Workstation Player。</p><ul><li>Player 是免费版本，只能用于非商业用途，适合个人学习。</li><li>Pro 是商业版本，功能最强大，付费以后才能使用。</li></ul><p>VMware Workstation Pro 下载地址链接<a href="https://pan.baidu.com/s/1_ElsqnaL4QppQvnJJbyMUw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_ElsqnaL4QppQvnJJbyMUw</a> 提取码：r5li （下载得到的压缩包中含有 VMware 安装所需的秘钥，亲测有效，可放心使用）</p><blockquote><p>VMware 对计算机的硬件配置要求比较高，配置低了虚拟机会很慢，甚至不能运行。理论上，配置越高越好，现在主流的计算机配置都可以达到运行 VMware 的要求。</p></blockquote><p>​        由于 VMware 的安装过程比较简单，与安装普通软件无异，因此不再过多阐述。这里假设读者已经下载并已安装好 VMware，接下来直接开始使用 VMware 安装 Linux 系统。</p><h2 id="四-虚拟机的安装"><a href="#四-虚拟机的安装" class="headerlink" title="四.虚拟机的安装"></a>四.虚拟机的安装</h2><p>启动 VMware，进入其主界面，如图 一 所示。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577106432956.png" alt="1577106432956"></p><p>​                                                          图一 -VMware主界面</p><p>点击“创建新的虚拟机”，进入虚拟机设置向导界面，如图 2二所示，这里建议初学者选择“典型（推荐）”。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577109011932.png" alt="1577109011932"></p><p>​                                                    图二-虚拟机设置向导界面</p><p>点击“下一步”，进入“安装操作系统”界面，将已经下载好的 Linux 系统的映像文件（.iso 文件），如图 三所示。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577106618728.png" alt="1577106618728"></p><p>​                                                    图三-安装客户机操作系统</p><p>继续“下一步”，进入“命名虚拟机”界面，给虚拟机起一个名字（如“CentOS 7”），然后单击“浏览”按钮，选择虚拟机系统安装文件的保存位置，如图 四 所示。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107096011.png" alt="1577107096011"></p><p>​                                                    图四-选择安装位置</p><p>单击”下一步”按钮，进入”指定磁盘容量”界面。默认虚拟硬盘大小为 20GB（虚拟硬盘会以文件形式存放在虚拟机系统安装目录中）。虚拟硬盘的空间可以根据需要调整大小，但不用担心其占用的空间，因为实际占用的空间还是以安装的系统大小而非此处划分的硬盘大小为依据的。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107114730.png" alt="1577107114730"></p><p>​                                                    图五-创建虚拟机向导</p><p>单机“下一步”按钮，这里，我们可以略做调整，单击”自定义硬件”按钮进入硬件调整界面。为了让虚拟机中的系统运行速度快一点，我们可以选择”内存”调整虚拟机内存大小，但是建议虚拟机内存不要超过宿主机内存的一半。如图六。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107217973.png" alt="1577107217973"></p><p>​                                                    图六-自定义硬件</p><p>硬盘配置设置完成后，点击图 七 中的“完成”按钮，就成功创建了一台虚拟机！VMware 会直接启动 Linux CentOS 系统，经过以上几步，我们就成功地用 VMware 虚拟机安装好了 Linux 系统。</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107272058.png" alt="1577107272058"></p><h2 id="五-Centos的安装和配置"><a href="#五-Centos的安装和配置" class="headerlink" title="五.Centos的安装和配置"></a>五.Centos的安装和配置</h2><p>安装完成后启动虚拟机进入到该界面，选择第一个install Centos7 开始安装</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107325196.png" alt="1577107325196"></p><p>接下来会进入到这个界面，耐心等待就好（大概两三分钟~~~）</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107343960.png" alt="1577107343960"></p><p>之后进入到选择语言界面，往下拉选择中文，然后下一步</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107490386.png" alt="1577107490386"></p><p>点击安装位置，选择磁盘，点击完成</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107525261.png" alt="1577107525261"></p><p>下一步，点击开始安装</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107601790.png" alt="1577107601790"></p><p>设置root密码，创建用户可以暂时忽略（有需要可以创建用户）</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107623409.png" alt="1577107623409"></p><p>设置root密码，记住root密码，常用于远程连接虚拟机</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107802739.png" alt="1577107802739"></p><p>安装完成，点击重启</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107902560.png" alt="1577107902560"></p><p>进入系统界面，选择第一个，进入系统</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577109551431.png" alt="1577109551431"></p><p>输入设置好的root用户名和密码，登录成功，开始愉快的使用linux系统吧！</p><p><img src="/2019/12/23/VMware虚拟机安装Centos7/1577107918552.png" alt="1577107918552"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#VMware虚拟机安装Centos7&lt;/p&gt;
&lt;h2 id=&quot;一-虚拟机的介绍&quot;&gt;&lt;a href=&quot;#一-虚拟机的介绍&quot; class=&quot;headerlink&quot; title=&quot;一.虚拟机的介绍&quot;&gt;&lt;/a&gt;一.虚拟机的介绍&lt;/h2&gt;&lt;p&gt;​          VMWare (Virtual Machine ware)是一个虚拟机软件，它可以使你在一台机器上同时运行二个或更多Windows、DOS、LINUX系统。“多启动”系统（Win10+Win7双系统）开机时只能选择其中一个运行，切换系统则需要重新启动机器。与之相比，VMWare在某种意义上可算是多系统“同时”运行。通过下载安装VMware Workstation，相当于在Windows系统里再安装了一个Windows系统，而且它还可以像应用程序那样进行切换。每个虚拟机操作系统你都可以进行虚拟的分区、配置而不影响真实硬盘的数据，甚至可以通过网卡将几台虚拟机用网卡连接为一个局域网，极其方便。&lt;/p&gt;
&lt;h2 id=&quot;二-Cetnos7镜像的下载&quot;&gt;&lt;a href=&quot;#二-Cetnos7镜像的下载&quot; class=&quot;headerlink&quot; title=&quot;二.Cetnos7镜像的下载&quot;&gt;&lt;/a&gt;二.Cetnos7镜像的下载&lt;/h2&gt;&lt;p&gt;阿里云站点：&lt;a href=&quot;http://mirrors.aliyun.com/centos/7/isos/x86_64/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.aliyun.com/centos/7/isos/x86_64/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每个链接都包括了镜像文件的地址、类型及版本号等信息&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.whitewater96.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.whitewater96.top/tags/linux/"/>
    
      <category term="虚拟机" scheme="http://blog.whitewater96.top/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
</feed>
